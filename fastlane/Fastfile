default_platform(:android)
fastlane_require 'dotenv'

unless FastlaneCore::Helper.bundler?
  UI.user_error!('Please run fastlane via `bundle exec`')
end

before_all do |lane|
  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']
end

########################################################################
# Environment
########################################################################
Dotenv.load('~/.wcandroid-env.default')
ENV[GHHELPER_REPO="woocommerce/woocommerce-android"]
ENV["PROJECT_NAME"]="WooCommerce"
ENV["PROJECT_ROOT_FOLDER"]="./"
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'
REPOSITORY_NAME="woocommerce-android"
GH_ORG_NAME="woocommerce"

UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(Dir.home, '.configure', 'woocommerce-android', 'secrets', 'google-upload-credentials.json')

SUPPORTED_LOCALES = [
  { glotpress: "ar", android: "ar", google_play: "ar",  promo_config: {}},
  { glotpress: "de", android: "de", google_play: "de-DE",  promo_config: {} },
  { glotpress: "es", android: "es", google_play: "es-ES",  promo_config: {} },
  { glotpress: "fr", android: "fr", google_play: "fr-FR",  promo_config: {} },
  { glotpress: "he", android: "he", google_play: "iw-IL",  promo_config: {} },
  { glotpress: "id", android: "id", google_play: "id",  promo_config: {} },
  { glotpress: "it", android: "it", google_play: "it-IT",  promo_config: {} },
  { glotpress: "ja", android: "ja", google_play: "ja-JP",  promo_config: {} },
  { glotpress: "ko", android: "ko", google_play: "ko-KR",  promo_config: {} },
  { glotpress: "nl", android: "nl", google_play: "nl-NL",  promo_config: {} },
  { glotpress: "pt-br", android: "pt-rBR", google_play: "pt-BR",  promo_config: {} },
  { glotpress: "ru", android: "ru", google_play: "ru-RU",  promo_config: {} },
  { glotpress: "sv", android: "sv", google_play: "sv-SE",  promo_config: {} },
  { glotpress: "tr", android: "tr", google_play: "tr-TR",  promo_config: {} },
  { glotpress: "zh-cn", android: "zh-rCN", google_play: "zh-CN",  promo_config: {} },
  { glotpress: "zh-tw", android: "zh-rTW", google_play: "zh-TW",  promo_config: {} },
].freeze

main_strings_path = "./WooCommerce/src/main/res/values/strings.xml"
update_strings_path = "./fastlane/resources/values/"

platform :android do
########################################################################
# Release Lanes
########################################################################

  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze codefreeze_version:<version> [update_release_branch_version:<update flag>] [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current trunk"
  lane :code_freeze do | options |
    old_version = android_codefreeze_prechecks(options)

    android_bump_version_release()
    new_version = android_get_app_version()

    extract_release_notes_for_version(version: new_version,
      release_notes_file_path:"#{ENV["PROJECT_ROOT_FOLDER"]}RELEASE-NOTES.txt",
      extracted_notes_file_path:release_notes_path)
    android_update_release_notes(new_version: new_version)
    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)

    localize_libs()
    send_strings_for_translation()
  end

  #####################################################################################
  # complete_code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the last steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane complete_code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane complete_code_freeze
  # bundle exec fastlane complete_code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current trunk"
  lane :complete_code_freeze do | options |
    android_completecodefreeze_prechecks(options)
    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the txt files in the WooCommerce/metadata/ folder
  # and updates the .pot file that is then picked by GlotPress for translations.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane update_appstore_strings version:<version>
  #
  # Example:
  # fastlane update_appstore_strings version:1.1
  #####################################################################################
  desc "Updates the PlayStoreStrings.pot file"
  lane :update_appstore_strings do |options|
    prj_folder = Dir.pwd + "/.."

    files = {
      release_note: prj_folder + "/WooCommerce/metadata/release_notes.txt",
      play_store_promo: prj_folder + "/WooCommerce/metadata/short_description.txt",
      play_store_desc: prj_folder + "/WooCommerce/metadata/full_description.txt",
      play_store_app_title: prj_folder + "/WooCommerce/metadata/title.txt",
      play_store_screenshot_1: prj_folder + "/WooCommerce/metadata/promo_screenshot_1.txt",
      play_store_screenshot_1_b: prj_folder + "/WooCommerce/metadata/promo_screenshot_1_b.txt",
      play_store_screenshot_2: prj_folder + "/WooCommerce/metadata/promo_screenshot_2.txt",
      play_store_screenshot_3: prj_folder + "/WooCommerce/metadata/promo_screenshot_3.txt",
      play_store_screenshot_4: prj_folder + "/WooCommerce/metadata/promo_screenshot_4.txt",
      play_store_screenshot_5: prj_folder + "/WooCommerce/metadata/promo_screenshot_5.txt",
      play_store_screenshot_6: prj_folder + "/WooCommerce/metadata/promo_screenshot_6.txt",
      play_store_screenshot_7: prj_folder + "/WooCommerce/metadata/promo_screenshot_7.txt",
      play_store_screenshot_8: prj_folder + "/WooCommerce/metadata/promo_screenshot_8.txt"
    }

    android_update_metadata_source(po_file_path: prj_folder + "/WooCommerce/metadata/PlayStoreStrings.pot",
      source_files: files,
      release_version: options[:version])
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc "Updates a release branch for a new beta release"
  lane :new_beta_release do | options |
    android_betabuild_prechecks(options)
    android_bump_version_beta()
    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotfix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version_name:<x.y.z>] [version_code:<nnnn>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version_name:10.6.1 version_code:1070
  #####################################################################################
  desc "Prepare a new hotfix branch cut from the previous tag, and bump the version"
  lane :new_hotfix_release do |options|
    hotfix_version = options[:version_name] || UI.input('Version number for the new hotfix?')
    previous_tag = android_hotfix_prechecks(version_name: hotfix_version, skip_confirm: options[:skip_confirm])
    android_bump_version_hotfix(previous_version_name: previous_tag, version_name: hotfix_version, version_code: options[:version_code])
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release
  desc "Finalizes a hotfix release by triggering a release build"
  lane :finalize_hotfix_release do |options|
    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # download_translations
  # -----------------------------------------------------------------------------------
  # This lane downloads the string translations from GlotPress
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane download_translations
  #####################################################################################
  desc "Download the latest app translations from GlotPress and update the strings.xml files accordingly"
  lane :download_translations do |options|
    android_download_translations(
      res_dir: File.join(ENV['PROJECT_NAME'], 'src', 'main', 'res'),
      glotpress_url: 'https://translate.wordpress.com/projects/woocommerce/woocommerce-android/',
      locales: SUPPORTED_LOCALES,
      lint_task: 'lintVanillaRelease'
    )
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata and runs the release checks
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc "Updates store metadata and runs the release checks"
  lane :finalize_release do | options |
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if android_current_branch_is_hotfix

    android_finalize_prechecks(options)
    configure_apply(force: is_ci)

    UI.message('Checking app strings translation status...')
    check_translation_progress(
      glotpress_url: 'https://translate.wordpress.com/projects/woocommerce/woocommerce-android/',
      abort_on_violations: false
    )
    UI.message("Checking release notes strings translation status...")
    check_translation_progress(
      glotpress_url: 'https://translate.wordpress.com/projects/woocommerce/woocommerce-android/release-notes/',
      abort_on_violations: false
    )

    download_translations(options)
    android_bump_version_final_release()

    version = android_get_release_version()
    download_metadata_strings(version: version["name"], build_number: version["code"])

    # Wrap up
    removebranchprotection(repository:GHHELPER_REPO, branch: "release/#{version["name"]}")
    setfrozentag(repository:GHHELPER_REPO, milestone: version["name"], freeze: false)
    create_new_milestone(repository:GHHELPER_REPO)
    close_milestone(repository:GHHELPER_REPO, milestone: version["name"])

    trigger_release_build(branch_to_build: "release/#{version["name"]}")
  end

  #####################################################################################
  # build_and_upload_release
  # -----------------------------------------------------------------------------------
  # This lane builds the final release of the app and uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_release [skip_confirm:<skip confirm>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_release
  # bundle exec fastlane build_and_upload_release skip_confirm:true
  # bundle exec fastlane build_and_upload_release create_release:true
  #####################################################################################
  desc "Builds and uploads release for distribution"
  lane :build_and_upload_release do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm],
      alpha: false,
      beta: false,
      final: true)
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    version = android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")

    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    aab_file_path = File.join(project_root, "artifacts", aab_file_name(version))

    UI.error("Unable to find a build artifact at #{aab_file_path}") unless File.exist? aab_file_path

    upload_to_play_store(
      package_name: 'com.woocommerce.android',
      aab: aab_file_path,
      track: 'production',
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
    )

    create_gh_release(version: version) if options[:create_release]
  end

  #####################################################################################
  # build_and_upload_beta
  # -----------------------------------------------------------------------------------
  # This lane builds the app for external beta distribution, and uploads the build
  # to the beta channel (but does not release it).
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_beta [skip_confirm:<skip confirm>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_beta
  # bundle exec fastlane build_and_upload_beta skip_confirm:true
  # bundle exec fastlane build_and_upload_beta create_release:true
  #####################################################################################
  desc "Builds and uploads a new beta build to Google Play (without releasing it)"
  lane :build_and_upload_beta do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm], alpha: false, beta: true, final: false) unless (options[:skip_prechecks])
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    version = android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")

    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    aab_file_path = File.join(project_root, "artifacts", aab_file_name(version))

    UI.error("Unable to find a build artifact at #{aab_file_path}") unless File.exist? aab_file_path

    upload_to_play_store(
      package_name: 'com.woocommerce.android',
      aab: aab_file_path,
      track: 'beta',
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
    )

    create_gh_release(version: version, prerelease: true) if options[:create_release]
  end

  #####################################################################################
   # trigger_release_build
   # -----------------------------------------------------------------------------------
   # This lane triggers a stable release build on CI
   # -----------------------------------------------------------------------------------
   # Usage:
   # bundle exec fastlane trigger_release_build [branch_to_build:<branch_name>]
   #
   #####################################################################################
   lane :trigger_release_build do | options |
    circleci_trigger_job(
      circle_ci_token: ENV["CIRCLE_CI_AUTH_TOKEN"],
      repository: REPOSITORY_NAME,
      organization: GH_ORG_NAME,
      branch: options[:branch_to_build],
      job_params: {"release_build" => true}
    )
  end

  #####################################################################################
  # localize_libs
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the dependencies and updates the main strings.xml file
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane localize_libs
  #
  # Example:
  # fastlane localize_libs
  #####################################################################################
  desc "Merge libraries strings files into the main app one"
  lane :localize_libs do | options |
    binary_imported_libraries = [
      {
        name: "Login Library",
        import_key: "wordPressLoginVersion",
        repository: "wordpress-mobile/WordPress-Login-Flow-Android",
        strings_file_path: "WordPressLoginFlow/src/main/res/values/strings.xml",
        github_release_prefix: "",
        exclusions: ["default_web_client_id"]
      },
      {
        name: "About Library",
        import_key: "aboutAutomatticVersion", # key used in build.gradle to reference the version
        repository: "Automattic/about-automattic-android",
        strings_file_path: "library/src/main/res/values/strings.xml",
        github_release_prefix: "",
        exclusions: []
      },
    ]

    binary_imported_libraries.each do  | lib |
      download_path = android_download_file_by_version(
        library_name: lib[:name],
        import_key: lib[:import_key],
        repository: lib[:repository],
        file_path: lib[:strings_file_path],
        github_release_prefix: lib[:github_release_prefix]
      )

      if download_path.nil?
        error_message = "Can't download strings file for #{lib[:name]}.\r\n"
        error_message += "Strings for this library won't get translated.\r\n"
        error_message += "Do you want to continue anyway?"
        UI.user_error! "Abort." unless UI.confirm(error_message)
      else
        UI.message("Strings.xml file for #{lib[:name]} downloaded to #{download_path}.")
        lib_to_merge = [{
          library: lib[:name],
          strings_path: download_path,
          exclusions: lib[:exclusions]
        }]
        an_localize_libs(app_strings_path: main_strings_path, libs_strings_path: lib_to_merge)
        File.delete(download_path) if File.exist?(download_path)
      end
    end

    is_repo_clean = ("git status --porcelain").empty?
    unless is_repo_clean then
      commit_strings(options)
    end
  end

  #####################################################################################
  # download_metadata_string
  # -----------------------------------------------------------------------------------
  # This lane downloads the translated metadata (release notes,
  # app store strings, title, etc.) from GlotPress and updates the local files
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane download_metadata_string build_number:<build_number> version:<version>
  #
  # Example:
  # fastlane download_metadata_string build_number:573 version:10.3
  #####################################################################################
  desc "Downloads translated metadata from GlotPress"
  lane :download_metadata_strings do |options|
    values = options[:version].split('.')
    files = {
      "release_note_#{values[0].to_s.rjust(2, "0")}#{values[1]}" => {desc: "changelogs/#{options[:build_number]}.txt", max_size: 0},
      play_store_promo: {desc:"short_description.txt", max_size: 80},
      play_store_desc: {desc:"full_description.txt", max_size: 0},
      play_store_app_title: {desc:"title.txt", max_size: 50}
    }

    delete_old_changelogs(build: options[:build_number])
    download_path=Dir.pwd + "/metadata/android"
    gp_downloadmetadata(project_url: "https://translate.wordpress.com/projects/woocommerce/woocommerce-android/release-notes/",
      target_files: files,
      locales: SUPPORTED_LOCALES.map {| hsh | [ hsh[:glotpress], hsh[:google_play] ]},
      source_locale: "en-US",
      download_path: download_path)

    android_create_xml_release_notes(download_path: download_path, build_number: "#{options[:build_number]}", locales: SUPPORTED_LOCALES.map {| hsh | [ hsh[:glotpress], hsh[:google_play] ]})
    add_us_release_notes(relese_notes_path: download_path + "/release_notes.xml", version_name: options[:version])
    sh("git add #{download_path} && (git diff-index --quiet HEAD || git commit -m \"Update metadata translations for #{options[:version]}\") && git push")
  end

  ########################################################################
  # Helper Lanes
  ########################################################################
  private_lane :commit_strings do | options |
    if (options[:auto_commit]) then
       sh("cd .. && git add #{main_strings_path}")
       sh("git commit -m 'Update strings for translation'")
       sh("git push origin HEAD")
    else
      UI.important("Your #{main_strings_path} has changed.")
      UI.input("Please, review the changes, commit them and press return to continue.")
    end
  end

  #####################################################################################
  # build_bundle
  # -----------------------------------------------------------------------------------
  # This lane builds an app bundle
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_bundle [skip_confirm:<skip confirm>]
  #####################################################################################
  desc "Builds an app bundle"
  lane :build_bundle do | options |
    # Create the file names
    version = options[:version]
    name = aab_file_name(version)
    apk_name = universal_apk_name(version)
    aab_file = "WooCommerce-vanilla-release.aab"
    output_dir = "WooCommerce/build/outputs/bundle/"
    build_dir = "artifacts/"

    # Build
    Dir.chdir(".") do
      UI.message("Cleaning branch...")
      gradle(task: "clean")
      UI.message("Running lint...")
      gradle(task: "lint", flavor: options[:flavor], build_type: "Release")
      UI.message("Building #{version["name"]} / #{version["code"]} - #{aab_file}...")
      gradle(task: "bundle", flavor: options[:flavor], build_type: "Release")
    end

    Dir.chdir("..") do
      sh("mkdir -p #{build_dir} && cp -v #{output_dir}#{options[:flavor].downcase}Release/#{aab_file} #{build_dir}#{name}")
      UI.message("Bundle ready: #{name}")
    end
    "#{build_dir}#{name}"
  end

  #####################################################################################
  # Private lanes
  #####################################################################################
  private_lane :delete_old_changelogs do | options |
    Dir.glob("./metadata/android/*/").each do | folder |
      Dir["#{folder}changelogs/*"].each do | file |
        File.delete(file) if Integer(File.basename(file, ".*")) < Integer(options[:build]) rescue puts "Cannot delete file #{file}"
      end
    end
  end

  private_lane :add_us_release_notes do | options |
    en_release_notes_path  = Dir.pwd + "/.." + "/WooCommerce/metadata/release_notes.txt"
    File.open(options[:relese_notes_path], "a") { |f|
      f.puts("<en-US>")
      f.puts("#{options[:version_name]}:")
      f.puts(File.open(en_release_notes_path).read)
      f.puts("</en-US>")
    }
  end

  # Creates a new GitHub Release for the given version
  #
  # @param [Hash<String>] version The version to create. Expects keys "name" and "code"
  # @param [Bool] prerelease If true, the GitHub Release will have the prerelease flag
  #
  private_lane :create_gh_release do | options |
    version = options[:version]
    prerelease = options[:prerelease] || false

    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))

    # APKs built on CI are not signed with master key, which means Google Sign-In won't work with those.
    # So don't attach them to the release, as this ends up being confusing for beta-testers.
    apk_file_path = File.join(project_root, 'artifacts', universal_apk_name(version)) unless is_ci
    aab_file_path = File.join(project_root, 'artifacts', aab_file_name(version))
    release_assets = [apk_file_path, aab_file_path].compact

    create_release(
      repository: GHHELPER_REPO,
      version: version["name"],
      release_notes_file_path: release_notes_path,
      prerelease: prerelease,
      release_assets: release_assets.join(',')
    )
  end

  private_lane :send_strings_for_translation do | options |
    sh("cd .. && mkdir -p #{update_strings_path} && cp #{main_strings_path} #{update_strings_path} && git add #{update_strings_path}strings.xml")
    sh("git diff-index --quiet HEAD || git commit -m \"Send strings to translation.\"")
    sh("git push origin HEAD")
  end

  #####################################################################################
  # Utils
  #####################################################################################
  def release_notes_path
    "#{ENV["PROJECT_ROOT_FOLDER"]}WooCommerce/metadata/release_notes.txt"
  end

  def aab_file_name(version)
    "wcandroid-#{version["name"]}.aab"
  end

  def universal_apk_name(version)
    "wcandroid-#{version["name"]}-universal.apk"
  end
end
