import io.sentry.android.gradle.extensions.InstrumentationFeature

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.google.dagger.hilt)
    alias(libs.plugins.ksp)
    id 'io.sentry.android.gradle'
}

repositories {
    maven {
        url 'https://a8c-libs.s3.amazonaws.com/android'
        content {
            includeGroup "org.wordpress"
            includeGroup "org.wordpress.fluxc"
            includeGroup "org.wordpress.fluxc.plugins"
            includeGroup "org.wordpress.wellsql"
            includeGroup "com.automattic"
            includeGroup "com.automattic.tracks"
        }
    }
    mavenCentral()
    maven {
        url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
        content {
            includeVersion "com.android.volley", "volley", "1.1.1"
        }
    }
}

sentry {
    includeSourceContext = true
    autoUploadSourceContext = true
    tracingInstrumentation {
        enabled = true
        features = [InstrumentationFeature.DATABASE]
        logcat {
            enabled = false
        }
    }
    autoInstallation {
        enabled = false
    }
    includeDependenciesReport = false
    /* Sentry won't send source context or add performance instrumentations for debug builds
    so we can save build times. Sending events will still work in debug builds
    (if enabled in WCCrashLoggingDataProvider).
    */
    ignoredBuildTypes = ["debug"]
}

def versionProperties = loadPropertiesFromFile(file("${rootDir}/version.properties"))
def versionCodeDifferenceBetweenAppAndWear = 50000

android {
    namespace 'com.woocommerce.android'
    compileSdk gradle.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.woocommerce.android"
        minSdk gradle.ext.minSdkVersion
        targetSdk gradle.ext.targetSdkVersion
        versionName "${versionProperties.getProperty("versionName")}w"
        versionCode versionProperties.getProperty("versionCode").toInteger() + versionCodeDifferenceBetweenAppAndWear
        vectorDrawables {
            useSupportLibrary true
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        buildConfig true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.androidx.compose.compiler.get()
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    flavorDimensions = ["buildType"]
    productFlavors {
        // Used for release/beta builds. Usually shouldn't be build locally.
        // AppName: WooCommerce
        vanilla {
            dimension "buildType"
        }

        // Used for local development - preferred variant for developers.
        // AppName: WooCommerce (Dev)
        wasabi {
            applicationId "com.woocommerce.android.dev"
            dimension "buildType"
            isDefault true

            resConfigs("en", "xxhdpi")
        }

        // Used for CI builds on PRs (downloadable apks). Can be used locally when a developer needs
        // to install multiple versions of the app on the same device.
        // AppName: WooCommerce (PreAlpha)
        jalapeno {
            applicationId "com.woocommerce.android.prealpha"
            dimension "buildType"
        }
    }
}

dependencies {
    // Project
    implementation project(":libs:commons")
    implementation("${gradle.ext.fluxCBinaryPath}:${libs.versions.wordpress.fluxc.get()}") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }
    implementation("${gradle.ext.fluxCWooCommercePluginBinaryPath}:${libs.versions.wordpress.fluxc.get()}") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }
    implementation(libs.wordpress.utils) {
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }
    implementation(libs.automattic.tracks.android)
    implementation(libs.automattic.tracks.crashlogging)

    // WearOS
    implementation(libs.google.play.services.wearable)
    implementation(libs.androidx.wear.tiles.main)
    implementation(libs.androidx.wear.tiles.material)
    implementation(libs.google.horologist.compose.tools)
    implementation(libs.google.horologist.tiles)
    implementation(libs.google.horologist.compose.layout)
    implementation(libs.androidx.wear.watchface.complications.data.source.ktx)
    implementation(libs.androidx.wear.compose.material)
    implementation(libs.androidx.wear.compose.foundation)
    implementation(libs.androidx.wear.tooling.preview)

    // Compose
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.compose.ui.main)
    implementation(libs.androidx.compose.ui.tooling.preview)
    implementation(libs.androidx.compose.material.main)
    implementation(libs.androidx.compose.animation.main)
    implementation(libs.androidx.compose.ui.tooling.main)
    implementation(libs.androidx.compose.runtime.livedata)
    implementation(libs.androidx.compose.material.icons.extended)
    implementation(libs.androidx.compose.ui.text.google.fonts)

    // Android Support
    implementation(libs.androidx.work.runtime.ktx)
    implementation(libs.androidx.lifecycle.viewmodel.savedstate)
    implementation(libs.androidx.lifecycle.livedata.ktx)
    implementation(libs.androidx.core.splashscreen)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.preference.ktx)
    implementation(libs.androidx.datastore.preferences)
    implementation(libs.androidx.datastore.main)
    implementation(libs.google.gson)

    // Coroutines
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.android)
    implementation(libs.kotlinx.coroutines.play.services)
    testImplementation(libs.kotlinx.coroutines.test)

    // Dagger & Hilt
    implementation(libs.google.dagger.hilt.android.main)
    implementation(libs.androidx.hilt.navigation.fragment)
    implementation(libs.androidx.hilt.common)
    implementation(libs.androidx.hilt.work)
    implementation(libs.androidx.hilt.navigation.compose)
    ksp(libs.androidx.hilt.compiler)
    ksp(libs.google.dagger.hilt.compiler)
    implementation(libs.google.dagger.android.support)
    ksp(libs.google.dagger.android.processor)

    // Testing
    testImplementation(libs.junit)
    testImplementation(libs.mockito.kotlin)
    testImplementation(libs.mockito.inline)
    testImplementation(libs.kotlin.test.junit)
    testImplementation(libs.assertj.core)
    testImplementation(libs.androidx.arch.core.testing) {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    }

    // Debug dependencies
    debugImplementation(libs.facebook.flipper.main)
    debugImplementation(libs.facebook.soloader)
    debugImplementation(libs.facebook.flipper.network.plugin) {
        // Force Flipper to use the okhttp version defined in the fluxc module
        // okhttp versions higher than 3.9.0 break handling for self-signed SSL sites
        // See https://github.com/wordpress-mobile/WordPress-FluxC-Android/issues/919
        exclude group: 'com.squareup.okhttp3'
    }
    lintChecks(libs.android.security.lint)
}

def checkGradlePropertiesFile() {
    def inputFile = file("${rootDir}/gradle.properties")
    if (!inputFile.exists()) {
        throw new StopActionException("Build configuration file gradle.properties doesn't exist, follow README instructions")
    }
    return inputFile
}

android.buildTypes.all { buildType ->
    def inputFile = checkGradlePropertiesFile()
    def properties = loadPropertiesFromFile(inputFile)
    properties.any { property ->
        if (property.key.toLowerCase().startsWith("wc.")) {
            buildType.buildConfigField "String", property.key.replace("wc.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
        if (property.key.toLowerCase().startsWith("wc.res.")) {
            buildType.resValue "string", property.key.replace("wc.res.", "").replace(".", "_").toLowerCase(),
                    "${property.value}"
        }
    }
}

static def loadPropertiesFromFile(inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

// For app signing
if (["uploadStoreFile", "uploadStorePassword", "uploadKeyAlias", "uploadKeyPassword"].count { !project.hasProperty(it) } == 0) {
    android {
        signingConfigs {
            release {
                storeFile = rootProject.file(project.uploadStoreFile)
                storePassword = project.uploadStorePassword
                keyAlias = project.uploadKeyAlias
                keyPassword = project.uploadKeyPassword
            }
        }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

if (project.hasProperty("debugStoreFile")) {
    def sharedDebugStore = file(project.debugStoreFile.replaceFirst("^~", System.getProperty("user.home")))
    if (sharedDebugStore.exists()) {
        android {
            signingConfigs {
                debug {
                    storeFile sharedDebugStore
                }
            }
        }
    }
}
