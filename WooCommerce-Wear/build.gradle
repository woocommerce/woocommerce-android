plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.parcelize'
    id 'com.google.dagger.hilt.android'
    id 'com.google.devtools.ksp'
}

repositories {
    maven {
        url 'https://a8c-libs.s3.amazonaws.com/android'
        content {
            includeGroup "org.wordpress"
            includeGroup "org.wordpress.fluxc"
            includeGroup "org.wordpress.fluxc.plugins"
            includeGroup "org.wordpress.wellsql"
        }
    }
    mavenCentral()
    maven {
        url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
        content {
            includeVersion "com.android.volley", "volley", "1.1.1"
        }
    }
}

def versionProperties = loadPropertiesFromFile(file("${rootDir}/version.properties"))
def versionCodeDifferenceBetweenAppAndWear = 50000

android {
    namespace 'com.woocommerce.android'
    compileSdk gradle.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.woocommerce.android"
        minSdk gradle.ext.minSdkVersion
        targetSdk gradle.ext.targetSdkVersion
        versionName "${versionProperties.getProperty("versionName")}w"
        versionCode versionProperties.getProperty("versionCode").toInteger() + versionCodeDifferenceBetweenAppAndWear
        vectorDrawables {
            useSupportLibrary true
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
    buildFeatures {
        buildConfig true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVersion
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    flavorDimensions = ["buildType"]
    productFlavors {
        // Used for release/beta builds. Usually shouldn't be build locally.
        // AppName: WooCommerce
        vanilla {
            dimension "buildType"
        }

        // Used for local development - preferred variant for developers.
        // AppName: WooCommerce (Dev)
        wasabi {
            applicationId "com.woocommerce.android.dev"
            dimension "buildType"
            isDefault true

            resConfigs("en", "xxhdpi")
        }

        // Used for CI builds on PRs (downloadable apks). Can be used locally when a developer needs
        // to install multiple versions of the app on the same device.
        // AppName: WooCommerce (PreAlpha)
        jalapeno {
            applicationId "com.woocommerce.android.prealpha"
            dimension "buildType"
        }
    }
}

dependencies {
    // Project
    implementation project(":libs:commons")
    implementation("${gradle.ext.fluxCBinaryPath}:$fluxCVersion") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }
    implementation("${gradle.ext.fluxCWooCommercePluginBinaryPath}:$fluxCVersion") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }
    implementation("org.wordpress:utils:$wordPressUtilsVersion") {
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    // WearOS
    implementation "com.google.android.gms:play-services-wearable:$googlePlayWearableVersion"
    implementation 'androidx.wear.tiles:tiles'
    implementation 'androidx.wear.tiles:tiles-material'
    implementation "com.google.android.horologist:horologist-compose-tools:$wearHorologistVersion"
    implementation "com.google.android.horologist:horologist-tiles:$wearHorologistVersion"
    implementation "com.google.android.horologist:horologist-compose-layout:$wearHorologistVersion"
    implementation 'androidx.wear.watchface:watchface-complications-data-source-ktx:1.2.1'
    implementation "androidx.wear.compose:compose-material:$wearComposeVersion"
    implementation "androidx.wear.compose:compose-foundation:$wearComposeVersion"
    implementation 'androidx.wear:wear-tooling-preview:1.0.0'

    // Compose
    implementation platform("androidx.compose:compose-bom:$composeBOMVersion")
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.animation:animation'
    implementation 'androidx.compose.ui:ui-tooling'
    implementation 'androidx.compose.runtime:runtime-livedata'
    implementation "androidx.compose.material:material-icons-extended"
    implementation 'androidx.compose.ui:ui-text-google-fonts'

    // Android Support
    implementation "androidx.work:work-runtime-ktx:$workManagerVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation "androidx.navigation:navigation-compose:2.7.7"
    implementation 'androidx.activity:activity-compose'
    implementation "androidx.preference:preference-ktx:1.2.1"
    implementation "androidx.datastore:datastore-preferences:1.1.0"
    implementation "androidx.datastore:datastore:1.1.0"
    implementation 'com.google.code.gson:gson:2.10.1'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // Dagger & Hilt
    implementation "com.google.dagger:hilt-android:$gradle.ext.daggerVersion"
    implementation "androidx.hilt:hilt-navigation-fragment:$hiltJetpackVersion"
    implementation "androidx.hilt:hilt-common:$hiltJetpackVersion"
    implementation "androidx.hilt:hilt-work:$hiltJetpackVersion"
    implementation "androidx.hilt:hilt-navigation-compose:1.2.0"
    ksp "androidx.hilt:hilt-compiler:$hiltJetpackVersion"
    ksp "com.google.dagger:hilt-compiler:$gradle.ext.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$gradle.ext.daggerVersion"
    ksp "com.google.dagger:dagger-android-processor:$gradle.ext.daggerVersion"

    // Testing
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$gradle.ext.kotlinVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation("androidx.arch.core:core-testing:2.1.0", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    // Debug dependencies
    debugImplementation "com.facebook.flipper:flipper:$flipperVersion"
    debugImplementation "com.facebook.soloader:soloader:0.10.4"
    debugImplementation("com.facebook.flipper:flipper-network-plugin:$flipperVersion") {
        // Force Flipper to use the okhttp version defined in the fluxc module
        // okhttp versions higher than 3.9.0 break handling for self-signed SSL sites
        // See https://github.com/wordpress-mobile/WordPress-FluxC-Android/issues/919
        exclude group: 'com.squareup.okhttp3'
    }
}

def checkGradlePropertiesFile() {
    def inputFile = file("${rootDir}/gradle.properties")
    if (!inputFile.exists()) {
        throw new StopActionException("Build configuration file gradle.properties doesn't exist, follow README instructions")
    }
    return inputFile
}

android.buildTypes.all { buildType ->
    def inputFile = checkGradlePropertiesFile()
    def properties = loadPropertiesFromFile(inputFile)
    properties.any { property ->
        if (property.key.toLowerCase().startsWith("wc.")) {
            buildType.buildConfigField "String", property.key.replace("wc.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
        if (property.key.toLowerCase().startsWith("wc.res.")) {
            buildType.resValue "string", property.key.replace("wc.res.", "").replace(".", "_").toLowerCase(),
                    "${property.value}"
        }
    }
}

static def loadPropertiesFromFile(inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

// For app signing
if (["uploadStoreFile", "uploadStorePassword", "uploadKeyAlias", "uploadKeyPassword"].count { !project.hasProperty(it) } == 0) {
    android {
        signingConfigs {
            release {
                storeFile = rootProject.file(project.uploadStoreFile)
                storePassword = project.uploadStorePassword
                keyAlias = project.uploadKeyAlias
                keyPassword = project.uploadKeyPassword
            }
        }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

if (project.hasProperty("debugStoreFile")) {
    def sharedDebugStore = file(project.debugStoreFile.replaceFirst("^~", System.getProperty("user.home")))
    if (sharedDebugStore.exists()) {
        android {
            signingConfigs {
                debug {
                    storeFile sharedDebugStore
                }
            }
        }
    }
}
