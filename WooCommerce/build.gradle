import io.sentry.android.gradle.extensions.InstrumentationFeature

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.parcelize'
    id 'com.google.dagger.hilt.android'
    id 'io.sentry.android.gradle'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
    id 'com.google.devtools.ksp'
    id "com.google.protobuf"
    id "com.osacky.fladle"
}

fladle {
    variant = "vanillaDebug"
    serviceAccountCredentials = rootProject.file(".configure-files/firebase.secrets.json")
    testTargets = [
            "notPackage com.woocommerce.android.e2e.tests.screenshot"
    ]
    devices = [
            [ "model": "Pixel2.arm", "version": "30" ]
    ]
    localResultsDir = "$rootDir/build/instrumented-tests"

    maxTestShards = 50
    shardTime = 120
    smartFlankGcsPath = "gs://fladle/woocommerce-android/smart-flank/JUnitReport.xml"
}

sentry {
    includeSourceContext = true
    autoUploadSourceContext = true
    tracingInstrumentation {
        enabled = true
        features = [InstrumentationFeature.DATABASE]
        logcat {
            enabled = false
        }
    }
    autoInstallation {
        enabled = false
    }
    includeDependenciesReport = false
    /* Sentry won't send source context or add performance instrumentations for debug builds
    so we can save build times. Sending events will still work in debug builds
    (if enabled in WCCrashLoggingDataProvider).
    */
    ignoredBuildTypes = ["debug"]

    /* Additional source directories to be included in the source context. For now, manually:
    https://github.com/getsentry/sentry-android-gradle-plugin/issues/685
     */
    additionalSourceDirsForSourceContext = [
            '../libs/cardreader/src/main/java',
    ]
}

repositories {
    maven {
        url 'https://a8c-libs.s3.amazonaws.com/android'
        content {
            includeGroup "org.wordpress"
            includeGroup "org.wordpress.fluxc"
            includeGroup "org.wordpress.fluxc.plugins"
            includeGroup "org.wordpress.wellsql"
            includeGroup "org.wordpress.mediapicker"
            includeGroup "com.automattic"
            includeGroup "com.automattic.tracks"
            includeGroup "com.gravatar"
            includeGroup "org.wordpress.aztec"
        }
    }
    maven {
        url 'https://zendesk.jfrog.io/zendesk/repo'
        content {
            includeGroup "com.zendesk"
            includeGroup "com.zendesk.belvedere2"
        }
    }
    mavenCentral()
    maven {
        url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
        content {
            includeVersion "com.android.volley", "volley", "1.1.1"
            includeVersion "com.google.android", "flexbox", "2.0.1"
            includeVersion "com.jraska", "falcon", "2.1.1"
            includeVersion "org.wordpress", "wellsql", "1.6.0"
            includeVersion "org.wordpress", "wellsql-core", "1.6.0"
        }
    }
    maven {
        url "https://jitpack.io"
        content {
            includeModule("com.github.wordpress-mobile.WordPress-Aztec-Android", "aztec")
            includeModule("com.github.wordpress-mobile.WordPress-Aztec-Android", "glide-loader")
            includeModule("com.github.chrisbanes", "PhotoView")
            includeModule("com.github.PhilJay", "MPAndroidChart")
        }
    }
}

def versionProperties = loadPropertiesFromFile(file("${rootDir}/version.properties"))

android {
    namespace "com.woocommerce.android"

    compileSdkVersion gradle.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.woocommerce.android"

        versionName versionProperties.getProperty("versionName")
        versionCode versionProperties.getProperty("versionCode").toInteger()

        minSdkVersion gradle.ext.minSdkVersion
        // Update targetSdkVersion only after reviewing all the OS changes (developer.android.com/about/versions/[ENTER_ANDROID_VERSION]/migration)
        // and thoroughly testing the app. Consider publishing a p2 post to inform the team about the upcoming change.
        // P.S. Update the targetSdkVersion in all the modules, otherwise static analysis tools won't give you a heads-up about potential issues.
        targetSdkVersion gradle.ext.targetSdkVersion

        testInstrumentationRunner 'com.woocommerce.android.WooCommerceTestRunner'
        // TODO remove this once the hilt migration is complete
        javaCompileOptions.annotationProcessorOptions.arguments['dagger.hilt.disableModulesHaveInstallInCheck'] = 'true'

        resValue "bool", "enable_leak_canary", isLeakCanaryEnabled().toString()

        packagingOptions {
            exclude 'META-INF/gradle/incremental.annotation.processors'
            exclude("META-INF/*.kotlin_module")
            pickFirst 'META-INF/AL2.0'
            pickFirst 'META-INF/LGPL2.1'
        }

        resConfigs(
                "en", "ar", "de", "es", "fr", "he", "id", "in", "it", "iw", "ja", "ko", "nl", "pt-rBR", "ru", "sv", "tr", "zh-rCN", "zh-rTW"
        )
    }

    buildFeatures {
        buildConfig true
        compose true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVersion
    }

    flavorDimensions "buildType"

    productFlavors {
        // Used for release/beta builds. Usually shouldn't be build locally.
        // AppName: WooCommerce
        vanilla {
            dimension "buildType"
        }

        // Used for local development - preferred variant for developers.
        // AppName: WooCommerce (Dev)
        wasabi {
            applicationId "com.woocommerce.android.dev"
            dimension "buildType"
            isDefault true

            resConfigs("en", "xxhdpi")
        }

        // Used for CI builds on PRs (downloadable apks). Can be used locally when a developer needs
        // to install multiple versions of the app on the same device.
        // AppName: WooCommerce (PreAlpha)
        jalapeno {
            applicationId "com.woocommerce.android.prealpha"
            dimension "buildType"
        }
    }

    buildTypes {
        release {
            // Proguard is used to shrink our apk, and reduce the number of methods in our final apk,
            // but we don't obfuscate the bytecode.
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            pseudoLocalesEnabled true
            isDefault true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        release.java.srcDirs += 'src/release/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'

        if (isLeakCanaryEnabled()) {
            debug.java.srcDirs += 'src/leakcanary/kotlin'
        }
    }

    lintOptions {
        sarifReport System.getenv('CI') ? true : false
        checkDependencies true
        disable 'InvalidPackage'
    }

    testOptions {
        animationsDisabled = true
    }
}

dependencies {
    implementation(libs.wordpress.libaddressinput.common) {
        exclude group: "org.json", module: "json"
        exclude group: "com.google.guava", module: "guava"
    }

    implementation platform('com.google.firebase:firebase-bom:32.7.1')
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-config'
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'com.google.android.gms:play-services-auth:20.2.0'

    // Support library
    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.recyclerview:recyclerview:1.3.2"
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"
    implementation(libs.androidx.appcompat)
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.transition:transition:$transitionVersion"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation("androidx.browser:browser:1.5.0") {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }
    implementation "androidx.preference:preference:1.2.0"
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "androidx.datastore:datastore:1.0.0"

    implementation "androidx.navigation:navigation-common:$gradle.ext.navigationVersion"
    implementation "androidx.navigation:navigation-fragment:$gradle.ext.navigationVersion"
    implementation "androidx.navigation:navigation-runtime:$gradle.ext.navigationVersion"
    implementation "androidx.navigation:navigation-ui:$gradle.ext.navigationVersion"

    implementation "androidx.work:work-runtime-ktx:$workManagerVersion"

    implementation 'androidx.core:core-splashscreen:1.0.0'

    implementation("org.wordpress:utils:$wordPressUtilsVersion") {
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    implementation("com.automattic.tracks:experimentation:$automatticTracksVersion") {
        exclude group: "org.wordpress", module: "fluxc"
    }
    implementation "com.automattic:Automattic-Tracks-Android:$automatticTracksVersion"
    implementation "com.automattic.tracks:crashlogging:$automatticTracksVersion"

    implementation("${gradle.ext.fluxCBinaryPath}:$fluxCVersion") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }
    implementation("${gradle.ext.fluxCWooCommercePluginBinaryPath}:$fluxCVersion") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation("$gradle.ext.loginFlowBinaryPath:$wordPressLoginVersion") {
        exclude group: "org.wordpress", module: "utils"
        exclude group: "org.wordpress", module: "fluxc"
    }

    implementation("org.wordpress:aztec:$aztecVersion") {
        exclude group: "com.android.volley"
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation("org.wordpress.aztec:glide-loader:$aztecVersion") {
        exclude group: "com.android.volley"
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation("com.gravatar:gravatar:$gravatarVersion")

    implementation project(":libs:commons")
    implementation project(":libs:cardreader")
    debugImplementation project(":libs:iap")

    implementation 'com.facebook.shimmer:shimmer:0.5.0'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation "com.automattic:about:$aboutAutomatticVersion"

    // Dagger
    implementation "com.google.dagger:hilt-android:$gradle.ext.daggerVersion"
    implementation "androidx.hilt:hilt-navigation-fragment:$hiltJetpackVersion"
    implementation "androidx.hilt:hilt-common:$hiltJetpackVersion"
    implementation "androidx.hilt:hilt-work:$hiltJetpackVersion"

    ksp "androidx.hilt:hilt-compiler:$hiltJetpackVersion"
    ksp "com.google.dagger:hilt-compiler:$gradle.ext.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$gradle.ext.daggerVersion"
    ksp "com.google.dagger:dagger-android-processor:$gradle.ext.daggerVersion"

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    ksp "com.github.bumptech.glide:compiler:$glideVersion"
    implementation "com.github.bumptech.glide:volley-integration:$glideVersion@aar"
    implementation 'com.google.android.play:app-update:2.1.0'
    implementation 'com.google.android.play:review:2.0.1'

    implementation 'com.google.android.gms:play-services-code-scanner:16.1.0'

    implementation "com.google.mlkit:text-recognition:$mlkitTextRecognitionVersion"
    implementation "com.google.android.gms:play-services-mlkit-text-recognition-japanese:$mlkitTextRecognitionVersion"
    implementation "com.google.android.gms:play-services-mlkit-text-recognition-chinese:$mlkitTextRecognitionVersion"
    implementation "com.google.android.gms:play-services-mlkit-text-recognition-korean:$mlkitTextRecognitionVersion"

    implementation "com.google.mlkit:barcode-scanning:$mlkitBarcodeScanningVersion"

    implementation "com.google.zxing:core:3.5.3"
    implementation "com.google.android.gms:play-services-wearable:$googlePlayWearableVersion"

    // Debug dependencies
    debugImplementation "com.facebook.flipper:flipper:$flipperVersion"
    debugImplementation "com.facebook.soloader:soloader:0.10.4"
    debugImplementation("com.facebook.flipper:flipper-network-plugin:$flipperVersion") {
        // Force Flipper to use the okhttp version defined in the fluxc module
        // okhttp versions higher than 3.9.0 break handling for self-signed SSL sites
        // See https://github.com/wordpress-mobile/WordPress-FluxC-Android/issues/919
        exclude group: 'com.squareup.okhttp3'
    }

    if (isLeakCanaryEnabled()) {
        debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'
    }

    // Dependencies for local unit tests
    testImplementation(libs.junit)
    testImplementation(libs.mockito.kotlin)
    testImplementation(libs.mockito.inline)
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$gradle.ext.kotlinVersion"
    testImplementation(libs.assertj.core)
    testImplementation("androidx.arch.core:core-testing:2.1.0", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    // Dependencies for Espresso UI tests
    androidTestImplementation(libs.androidx.test.ext.junit)
    androidTestImplementation(libs.androidx.test.main.rules)
    androidTestImplementation(libs.assertj.core)
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }
    androidTestImplementation "com.google.dagger:hilt-android-testing:$gradle.ext.daggerVersion"
    kspAndroidTest "com.google.dagger:hilt-android-compiler:$gradle.ext.daggerVersion"
    androidTestImplementation(libs.androidx.test.uiautomator)

    // Dependencies for screenshots
    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'
    androidTestImplementation('com.github.tomakehurst:wiremock') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'asm', module: 'asm'
        exclude group: 'org.json', module: 'json'
    }
    constraints {
        androidTestImplementation("com.github.tomakehurst:wiremock:2.26.3") {
            because("newer versions of WireMock use Java APIs not available on Android")
        }
        androidTestImplementation('org.eclipse.jetty:jetty-webapp:9.4.51.v20230217') {
            because("version shipped with WireMock 2.26.3 contains security vulnerabilities")
        }
        androidTestImplementation('com.fasterxml.jackson.core:jackson-databind:2.12.7.1') {
            because("version shipped with WireMock 2.26.3 contains security vulnerabilities")
        }
        androidTestImplementation('com.jayway.jsonpath:json-path:2.9.0') {
            because("version shipped with WireMock 2.26.3 contains security vulnerabilities")
        }
        androidTestImplementation('commons-fileupload:commons-fileupload:1.5') {
            because("version shipped with WireMock 2.26.3 contains security vulnerabilities")
        }
    }
    androidTestImplementation "org.apache.httpcomponents:httpclient-android:$httpClientAndroidVersion"

    implementation("com.zendesk:support:5.0.8") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    // ViewModel and LiveData
    implementation "androidx.fragment:fragment-ktx:1.8.2"
    implementation "androidx.activity:activity-ktx:1.8.0"
    implementation(libs.androidx.lifecycle.viewmodel.savedstate)
    implementation(libs.androidx.lifecycle.process)

    // Coroutines
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.android)
    implementation(libs.kotlinx.coroutines.play.services)
    testImplementation(libs.kotlinx.coroutines.test)

    testImplementation 'app.cash.turbine:turbine:1.0.0'

    implementation "org.apache.commons:commons-text:$commonsText"
    implementation "commons-io:commons-io:$commonsIO"

    implementation "com.tinder.statemachine:statemachine:$stateMachineVersion"

    implementation("${gradle.ext.mediaPickerBinaryPath}:$mediapickerVersion") {
        exclude group: "org.wordpress", module: "utils"
    }
    implementation("${gradle.ext.mediaPickerSourceCameraBinaryPath}:$mediapickerVersion")
    implementation("${gradle.ext.mediaPickerSourceWordPressBinaryPath}:$mediapickerVersion") {
        exclude group: "org.wordpress", module: "utils"
        exclude group: "org.wordpress", module: "fluxc"
    }

    // Jetpack Compose
    implementation platform("androidx.compose:compose-bom:$composeBOMVersion")
    // Dependencies managed by BOM
    implementation 'androidx.activity:activity-compose'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.animation:animation'
    implementation 'androidx.compose.ui:ui-tooling'
    implementation 'androidx.compose.runtime:runtime-livedata'
    implementation "androidx.compose.material:material-icons-extended"
    implementation 'androidx.compose.ui:ui-text-google-fonts'
    implementation 'androidx.navigation:navigation-compose'

    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout-compose:1.0.1'
    implementation(libs.androidx.lifecycle.viewmodel.compose)
    implementation "io.coil-kt:coil-compose:$coilVersion"
    implementation "io.coil-kt:coil-svg:$coilVersion"

    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.2'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    // CameraX
    implementation "androidx.camera:camera-camera2:$androidxCameraVersion"
    implementation "androidx.camera:camera-lifecycle:$androidxCameraVersion"
    implementation "androidx.camera:camera-view:$androidxCameraVersion"

    implementation "com.google.guava:guava:$guavaVersion"

    implementation "com.google.protobuf:protobuf-javalite:$protobufVersion"

    lintChecks "com.android.security.lint:lint:$securityLintVersion"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

androidComponents {
    onVariants(selector().all(), { variant ->
        afterEvaluate {
            def capName = variant.name.capitalize()
            tasks.getByName("ksp${capName}Kotlin") {
                setSource(tasks.getByName("generate${capName}Proto").outputs)
            }
        }
    })
}

task copyGoogleServicesExampleFile(type: Copy) {
    from('.')
    into('.')
    include('google-services.json-example')
    rename('google-services.json-example', 'google-services.json')
}

// Add properties named "wc.xxx" to our BuildConfig
android.buildTypes.all { buildType ->
    def inputFile = checkGradlePropertiesFile()
    def properties = loadPropertiesFromFile(inputFile)
    properties.any { property ->
        if (property.key.toLowerCase().startsWith("wc.")) {
            buildType.buildConfigField "String", property.key.replace("wc.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
        if (property.key.toLowerCase().startsWith("wc.res.")) {
            buildType.resValue "string", property.key.replace("wc.res.", "").replace(".", "_").toLowerCase(),
                    "${property.value}"
        }
    }

    buildConfigField "String",
            "IAP_TESTING_SANDBOX_URL",
            "\"${project.properties.getOrDefault('iap_testing_sandbox_url', '')}\""

    buildConfigField "String",
            "JITM_TESTING_JSON_FILE_NAME",
            "\"${project.properties.getOrDefault('jitm_testing_json_file_name', '')}\""

    // If Google services file doesn't exist, copy example file.
    if (!file("google-services.json").exists()) {
        tasks.copyGoogleServicesExampleFile.copy()
    }

    // Print warning message if example Google services file is used.
    if ((file("google-services.json").text) == (file("google-services.json-example").text)) {
        println("WARNING: You're using the example google-services.json file. Google login will fail.")
    }
}

task printVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}

def checkGradlePropertiesFile() {
    def inputFile = file("${rootDir}/gradle.properties")
    if (!inputFile.exists()) {
        throw new StopActionException("Build configuration file gradle.properties doesn't exist, follow README instructions")
    }
    return inputFile
}

static def loadPropertiesFromFile(inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

def isLeakCanaryEnabled() {
    return project.properties.getOrDefault('enableLeakCanary', 'true') == 'true'
}

// For app signing
if (["uploadStoreFile", "uploadStorePassword", "uploadKeyAlias", "uploadKeyPassword"].count { !project.hasProperty(it) } == 0) {
    android {
        signingConfigs {
            release {
                storeFile = rootProject.file(project.uploadStoreFile)
                storePassword = project.uploadStorePassword
                keyAlias = project.uploadKeyAlias
                keyPassword = project.uploadKeyPassword
            }
        }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

if (project.hasProperty("debugStoreFile")) {
    def sharedDebugStore = file(project.debugStoreFile.replaceFirst("^~", System.getProperty("user.home")))
    if (sharedDebugStore.exists()) {
        android {
            signingConfigs {
                debug {
                    storeFile sharedDebugStore
                }
            }
        }
    }
}

apply from: '../config/gradle/build_optimization.gradle'
