buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.google.gms:google-services:3.2.0'
        classpath 'se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.51'
        classpath 'io.sentry:sentry-android-gradle-plugin:1.7.28'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-allopen'
apply plugin: 'se.bjurr.violations.violation-comments-to-github-gradle-plugin'
apply plugin: 'io.sentry.android.gradle'
apply plugin: 'androidx.navigation.safeargs.kotlin'

repositories {
    maven { url 'https://zendesk.jfrog.io/zendesk/repo' }
}

allOpen {
    annotation("com.woocommerce.android.annotations.OpenClass")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://dl.bintray.com/wordpress-mobile/maven" }
}

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.1'

    defaultConfig {
        applicationId "com.woocommerce.android"
        // Allow versionName to be overridden with property. e.g. -PversionName=1234
        if (project.hasProperty("versionName")) {
            versionName project.property("versionName")
        } else {
            versionName "4.4"
        }
        versionCode 134

        minSdkVersion 21
        targetSdkVersion 29

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner 'com.woocommerce.android.WooCommerceTestRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    flavorDimensions "buildType"

    productFlavors {
        vanilla { // Release version
            dimension "buildType"
        }

        wasabi { // Development only version, can be installed along release versions
            applicationId "com.woocommerce.android.dev"
            dimension "buildType"
        }
    }

    buildTypes {
        release {
            // Proguard is used to shrink our apk, and reduce the number of methods in our final apk,
            // but we don't obfuscate the bytecode.
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            pseudoLocalesEnabled true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        release.java.srcDirs += 'src/release/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    testOptions {
        animationsDisabled = true
    }
}

dependencies {

    implementation("org.wordpress:libaddressinput.common:$libaddressinputVersion") {
        exclude group: "org.json", module: "json"
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation 'com.google.firebase:firebase-messaging:17.0.0'
    implementation 'com.google.android.gms:play-services-auth:15.0.1'

    // Support library
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation ("androidx.browser:browser:1.2.0") {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }
    implementation "androidx.preference:preference:1.1.0"

    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    implementation('org.wordpress:utils:1.24') {
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    implementation 'com.github.Automattic:Automattic-Tracks-Android:52d3e23406'

    implementation("com.github.wordpress-mobile.WordPress-FluxC-Android:fluxc:$fluxCVersion") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation("com.github.wordpress-mobile.WordPress-FluxC-Android:woocommerce:$fluxCVersion") {
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation(project(path: ':libs:login:WordPressLoginFlow')) {
        exclude group: "com.github.wordpress-mobile.WordPress-FluxC-Android", module: "fluxc"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation("com.github.wordpress-mobile.WordPress-Aztec-Android:aztec:$aztecVersion") {
        exclude group: "com.android.volley"
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation("com.github.wordpress-mobile.WordPress-Aztec-Android:glide-loader:$aztecVersion") {
        exclude group: "com.android.volley"
        exclude group: "com.android.support"
        exclude group: "org.wordpress", module: "utils"
    }

    implementation 'com.facebook.shimmer:shimmer:0.4.0'
    implementation 'com.github.vihtarb:tooltip:0.2.0'
    implementation 'com.github.chrisbanes:PhotoView:2.0.0'

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    compileOnly("com.squareup.inject:assisted-inject-annotations-dagger2:0.3.3")
    kapt("com.squareup.inject:assisted-inject-processor-dagger2:0.3.3")

    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"
    implementation "com.github.bumptech.glide:volley-integration:$glideVersion@aar"
    implementation "org.greenrobot:eventbus:$eventBusVersion"
    implementation "com.google.android.play:core:$googlePlayCoreVersion"

    // For use with SqlScout, a Sqlite plugin for Android Studio
    // https://plugins.jetbrains.com/plugin/8322-sqlscout-sqlite-support-
    debugImplementation 'com.idescout.sql:sqlscout-server:4.1'
    releaseImplementation 'com.idescout.sql:sqlscout-server-noop:4.1'

    // Debug dependencies
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-3'

    // Dependencies for local unit tests
    testImplementation "junit:junit:4.12"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation("androidx.arch.core:core-testing:2.1.0", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    // Dependencies for Espresso UI tests
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test:rules:1.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.2.0"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptAndroidTest("com.squareup.inject:assisted-inject-processor-dagger2:0.3.3")
    androidTestCompileOnly("com.squareup.inject:assisted-inject-annotations-dagger2:0.3.3")

    // Dependencies for screenshots
    androidTestImplementation 'tools.fastlane:screengrab:2.0.0'

    // Resolve conflicts between main and test APK
    androidTestImplementation "androidx.annotation:annotation:1.1.0"
    androidTestImplementation "com.google.code.findbugs:jsr305:2.0.1"

    implementation(group: 'com.zendesk', name: 'support', version: '4.0.0') {
        exclude group: 'com.google.dagger'
    }

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$archComponentsVersion"
    implementation "androidx.fragment:fragment-ktx:1.2.0"
    implementation "androidx.activity:activity-ktx:1.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.2.0"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    implementation "org.apache.commons:commons-lang3:3.9"
    implementation "org.apache.commons:commons-text:1.8"
}

task copyGoogleServicesExampleFile(type: Copy) {
    from('.')
    into('.')
    include('google-services.json-example')
    rename('google-services.json-example', 'google-services.json')
}

// Add properties named "wc.xxx" to our BuildConfig
android.buildTypes.all { buildType ->
    def inputFile = checkGradlePropertiesFile()
    def properties = loadPropertiesFromFile(inputFile)
    properties.any { property ->
        if (property.key.toLowerCase().startsWith("wc.")) {
            buildType.buildConfigField "String", property.key.replace("wc.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
        if (property.key.toLowerCase().startsWith("wc.res.")) {
            buildType.resValue "string", property.key.replace("wc.res.", "").replace(".", "_").toLowerCase(),
                    "${property.value}"
        }
    }

    // If Google services file doesn't exist, copy example file.
    if (!file("google-services.json").exists()) {
        tasks.copyGoogleServicesExampleFile.copy()
    }

    // Print warning message if example Google services file is used.
    if ((file("google-services.json").text) == (file("google-services.json-example").text)) {
        println("WARNING: You're using the example google-services.json file. Google login will fail.")
    }
}

task violationCommentsToGitHub(type: se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask) {
    repositoryOwner = "woocommerce";
    repositoryName = "woocommerce-android"
    pullRequestId = System.properties['GITHUB_PULLREQUESTID']
    username = System.properties['GITHUB_USERNAME']
    password = System.properties['GITHUB_PASSWORD']
    oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']
    gitHubUrl = "https://api.github.com/"
    createCommentWithAllSingleFileComments = false
    createSingleFileComments = true
    commentOnlyChangedContent = true
    minSeverity = se.bjurr.violations.lib.model.SEVERITY.INFO //ERROR, INFO, WARN
    commentTemplate = """
**Reporter**: {{violation.reporter}}{{#violation.rule}}\n
**Rule**: {{violation.rule}}{{/violation.rule}}
**Severity**: {{violation.severity}}
**File**: {{violation.file}} L{{violation.startLine}}{{#violation.source}}
**Source**: {{violation.source}}{{/violation.source}}
{{violation.message}}
"""
    violations = [
            ["CHECKSTYLE", ".", ".*/build/.*\\.xml\$", "Checkstyle"]
    ]
}

def checkGradlePropertiesFile() {
    def inputFile = file("${rootDir}/gradle.properties")
    if (!inputFile.exists()) {
        throw new StopActionException("Build configuration file gradle.properties doesn't exist, follow README instructions")
    }
    return inputFile
}

static def loadPropertiesFromFile(inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

// For app signing
if (["storeFile", "storePassword", "keyAlias", "keyPassword"].count { !project.hasProperty(it) } == 0) {
    android {
        signingConfigs {
            release {
                storeFile = rootProject.file(project.storeFile)
                storePassword = project.storePassword
                keyAlias = project.keyAlias
                keyPassword = project.keyPassword
            }
        }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

// Keep this at the bottom (https://stackoverflow.com/a/37565535)
apply plugin: 'com.google.gms.google-services'
