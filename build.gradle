import io.github.wzieba.tracks.plugin.BuildTimePlugin
import io.github.wzieba.tracks.plugin.TracksExtension
import io.gitlab.arturbosch.detekt.Detekt

buildscript {
    ext.kotlinVersion = '1.5.31'
    ext.navigationVersion = '2.4.0-beta02'
    ext.daggerVersion = '2.40.1'
    ext.wordPressLoginVersion = '0.10.0'
    ext.detektVersion = '1.18.1'

    repositories {
        google()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.automattic.android:fetchstyle:1.1'
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$daggerVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "io.github.wzieba.tracks:io.github.wzieba.tracks.plugin:1.0.0"
    }
}

apply plugin: 'com.automattic.android.fetchstyle'
apply plugin: BuildTimePlugin

tracks {
    automatticProject.set(TracksExtension.AutomatticProject.WooCommerce)
    enabled.set((findProperty('tracksEnabled') ?: false).toBoolean())
    username.set(findProperty('tracksUsername'))
}

allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        google()
        jcenter()
    }

    task checkstyle(type: Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = '8.3'
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }
}

subprojects {
    configurations {
        compile.exclude group: 'org.jetbrains', module: 'annotations-java5'
    }
}


tasks.register("detektAll", Detekt) {
    description = "Custom DETEKT build for all modules"
    parallel = true
    ignoreFailures = false
    buildUponDefaultConfig = true
    setSource(file(projectDir))
    baseline.set(file("$rootDir/config/detekt/baseline.xml"))
    config.setFrom(files("$rootDir/config/detekt/detekt.yml"))
    include("**/*.kt")
    exclude("**/resources/**", "**/build/**")

    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = false
    }
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Copies git-hooks from the `tools/team-props/git-hooks' directory to the `.git/hooks` folder
 * at the root of this project.
 */
tasks.register("installGitHooks", Copy) {
    println "Copying git-hooks scripts from tools/team-props/git-hooks to .git/hooks"
    from new File(rootProject.rootDir, 'tools/team-props/git-hooks')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

ext {
    fluxCVersion = 'develop-e490ac0557848d32e28781e7f8fca4923e587a98'
    glideVersion = '4.12.0'
    testRunnerVersion = '1.0.1'
    espressoVersion = '3.4.0'
    mockitoKotlinVersion = '4.0.0'
    mockitoVersion = '4.0.0'
    constraintLayoutVersion = '1.2.0'
    libaddressinputVersion = '0.0.2'
    eventBusVersion = '3.3.0'
    googlePlayCoreVersion = '1.10.2'
    coroutinesVersion = '1.5.2'
    lifecycleVersion = '2.4.0'
    assertjVersion = '3.11.1'
    aztecVersion = 'v1.3.45'
    flipperVersion = '0.118.1'
    stateMachineVersion = '0.2.0'
    coreKtxVersion = '1.7.0'
    appCompatVersion = '1.3.1'
    materialVersion = '1.4.0'
    jUnitVersion = '4.13.2'
    jUnitExtVersion = '1.1.3'
    hiltJetpackVersion = '1.0.0'
    wordPressUtilsVersion = "develop-358e582786c11d6d5ae5a351c2ad5475a3376ece"
    mediapickerVersion = 'trunk-4da42c711820c4b2e83b7735fbb39dbcf8c9176c'
}

// Onboarding and dev env setup tasks
task checkBundler(type:Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task checkBundle(type:Exec, dependsOn:checkBundler) {
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task applyCredentials(type:Exec, dependsOn:checkBundle) {
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}
