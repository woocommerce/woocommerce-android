import com.automattic.android.measure.MeasureBuildsExtension
import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.detekt)
    id 'com.automattic.android.measure-builds'
    id "com.autonomousapps.dependency-analysis"
    alias(libs.plugins.android.application).apply(false)
    alias(libs.plugins.android.library).apply(false)
    alias(libs.plugins.android.test).apply(false)
    alias(libs.plugins.kotlin.android).apply(false)
    alias(libs.plugins.kotlin.parcelize).apply(false)
    alias(libs.plugins.google.dagger.hilt).apply(false)
    id 'androidx.navigation.safeargs.kotlin' apply false
    alias(libs.plugins.google.services).apply(false)
    alias(libs.plugins.ksp).apply(false)
}

measureBuilds {
    enable = findProperty('tracksEnabled')?.toBoolean() ?: false
    automatticProject = MeasureBuildsExtension.AutomatticProject.WooCommerce
    attachGradleScanId = true
    authToken = findProperty('appsMetricsToken')
}

allprojects {
    apply plugin: libs.plugins.detekt.get().pluginId

    repositories {
        google()
        mavenCentral()
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
            allWarningsAsErrors = true
            freeCompilerArgs += [
                    "-opt-in=kotlin.RequiresOptIn",
                    "-Xjvm-default=all-compatibility",
            ]
        }
    }
}

subprojects {
    configurations {
        compile.exclude group: 'org.jetbrains', module: 'annotations-java5'
    }
}

def detektAll = tasks.register("detektAll", Detekt) {
    description = "Custom DETEKT build for all modules"
    parallel = true
    ignoreFailures = false
    buildUponDefaultConfig = true
    setSource(file(projectDir))
    baseline.set(file("$rootDir/config/detekt/baseline.xml"))
    config.setFrom(files("$rootDir/config/detekt/detekt.yml"))
    include("**/*.kt")
    exclude("**/resources/**", "**/build/**", "/vendor/**")

    reports {
        xml.required.set(true)
        html.required.set(true)
        txt.required.set(false)
    }
}

def detektAutoCorrectPrompt = tasks.register("detektAutoCorrectPrompt") {
    doLast {
        def detektTask = detektAll.get()
        if (detektTask.state.failure != null && !detektTask.autoCorrect) {
            println ".-----------------------------------------------------------------------------------------------------------------------------------.\n" +
                    "| ðŸ›   Did you know: you can ask Detekt to automatically resolve some of the issues by running `./gradlew detektAll --auto-correct` |\n" +
                    "'-----------------------------------------------------------------------------------------------------------------------------------'"
        }
    }
}

detektAll.configure {
    finalizedBy detektAutoCorrectPrompt
}

dependencies {
    detektPlugins(libs.detekt.formatting)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Copies git-hooks from the `tools/team-props/git-hooks' directory to the `.git/hooks` folder
 * at the root of this project.
 */
tasks.register("installGitHooks", Copy) {
    println "Copying git-hooks scripts from tools/team-props/git-hooks to .git/hooks"
    from new File(rootProject.rootDir, 'tools/team-props/git-hooks')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

ext {
    protobufVersion = '3.25.3'
}

// Onboarding and dev env setup tasks
task checkBundler(type: Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task checkBundle(type: Exec, dependsOn: checkBundler) {
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task applyCredentials(type: Exec, dependsOn: checkBundle) {
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}

apply from: './config/gradle/jacoco.gradle'
apply from: './config/gradle/gradle_build_scan.gradle'
