<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ArgumentListWrapping:CardReaderOnboardingChecker.kt$CardReaderOnboardingChecker$("Developer error:`preferredPlugin` should be WCPay")</ID>
    <ID>ArgumentListWrapping:PaymentsHubDepositSummaryStateMapper.kt$PaymentsHubDepositSummaryStateMapper$(it)</ID>
    <ID>ClassNaming:ProductDetailViewModel_AddFlowTest.kt$ProductDetailViewModel_AddFlowTest : BaseUnitTest</ID>
    <ID>CommentWrapping:IssueRefundViewModel.kt$IssueRefundViewModel$/* Fees lines that haven't been refunded */</ID>
    <ID>CommentWrapping:IssueRefundViewModel.kt$IssueRefundViewModel$/* Shipping lines that haven't been refunded */</ID>
    <ID>CommentWrapping:RefundFeeListAdapter.kt$RefundFeeListAdapter.FeeRefundListItem$/* Hardcoded because a fee line always has a quantity of 1 */</ID>
    <ID>CommentWrapping:RefundShippingListAdapter.kt$RefundShippingListAdapter.ShippingRefundListItem$/* Hardcoded because a shipping line always has a quantity of 1 */</ID>
    <ID>CommentWrapping:ShippingLabelCreateCustomPackageViewModel.kt$ShippingLabelCreateCustomPackageViewModel$/* Safe to set as empty, as it's not used for package creation */</ID>
    <ID>CommentWrapping:ShippingPackage.kt$ShippingPackage$/* Can be empty, only needed by predefined packages */</ID>
    <ID>ComplexCondition:ProductImageViewerFragment.kt$ProductImageViewerFragment$(show &amp;&amp; binding.fakeToolbar.visibility == View.VISIBLE) || (!show &amp;&amp; binding.fakeToolbar.visibility != View.VISIBLE)</ID>
    <ID>ComplexCondition:ReviewListAdapter.kt$ReviewListAdapter$it.remoteId == review.remoteId &amp;&amp; it.review == review.review &amp;&amp; it.read == (review.read != false) &amp;&amp; it.status == review.status</ID>
    <ID>CyclomaticComplexMethod:AddOrderShipmentTrackingFragment.kt$AddOrderShipmentTrackingFragment$private fun setupObservers(binding: FragmentAddShipmentTrackingBinding)</ID>
    <ID>CyclomaticComplexMethod:CreateShippingLabelFragment.kt$CreateShippingLabelFragment$private fun subscribeObservers(binding: FragmentCreateShippingLabelBinding)</ID>
    <ID>CyclomaticComplexMethod:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$private fun initializeStateMachine()</ID>
    <ID>CyclomaticComplexMethod:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$private fun updateViewState(stateMachineData: StateMachineData)</ID>
    <ID>CyclomaticComplexMethod:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$fun bind(shippingLabel: ShippingLabel)</ID>
    <ID>CyclomaticComplexMethod:OrderNavigator.kt$OrderNavigator$fun navigate(fragment: Fragment, target: OrderNavigationTarget)</ID>
    <ID>CyclomaticComplexMethod:Product.kt$Product$fun isSameProduct(product: Product): Boolean</ID>
    <ID>CyclomaticComplexMethod:Product.kt$fun Product.toDataModel(storedProductModel: WCProductModel? = null): WCProductModel</ID>
    <ID>CyclomaticComplexMethod:ProductImagesFragment.kt$ProductImagesFragment$private fun setupObservers(viewModel: ProductImagesViewModel)</ID>
    <ID>CyclomaticComplexMethod:ProductNavigator.kt$ProductNavigator$fun navigate(fragment: Fragment, target: ProductNavigationTarget)</ID>
    <ID>CyclomaticComplexMethod:ProductPricingFragment.kt$ProductPricingFragment$private fun setupViews(currency: String, isCurrencyPrefix: Boolean, pricingData: PricingData)</ID>
    <ID>CyclomaticComplexMethod:ProductVariation.kt$ProductVariation$fun toDataModel(cachedVariation: WCProductVariationModel? = null): WCProductVariationModel</ID>
    <ID>CyclomaticComplexMethod:ProductVariation.kt$ProductVariation$override fun equals(other: Any?): Boolean</ID>
    <ID>CyclomaticComplexMethod:ReviewListAdapter.kt$ReviewListAdapter$fun setReviews(reviews: List&lt;ProductReview&gt;)</ID>
    <ID>CyclomaticComplexMethod:ShippingCustomsViewModel.kt$ShippingCustomsViewModel$private fun CustomsPackage.validate(): PackageValidationState</ID>
    <ID>CyclomaticComplexMethod:WCEmptyView.kt$WCEmptyView$fun show( type: EmptyViewType, searchQueryOrFilter: String? = null, onButtonClick: (() -&gt; Unit)? = null )</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:DomainDashboardScreen.kt$val (title, description, claimLink, image) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ExpandableGroupedProductCard.kt$val (img, name, stock, sku, quantity, discount, price, chevron, expandedPart) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ExpandableProductCard.kt$val ( topDivider, bottomDivider, orderCount, price, discountButton, discountAmount, priceAfterDiscountLabel, priceAfterDiscountValue, removeButton, configurationButton, configurationDivider ) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ExpandableProductCard.kt$val (img, name, stock, sku, quantity, discount, price, chevron, expandedPart) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:OrderCreateEditProductDiscountScreen.kt$val (asyncImage, productNameText, productDetailsText, totalText) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:PlansScreen.kt$val (icon, image, title, price, period, features) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:StoreInstallationScreen.kt$val (image, title, progress, description) = createRefs()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:TaxRateSelectorScreen.kt$val (label, subtitle, autoRateSwitch, divider) = createRefs()</ID>
    <ID>EmptyDefaultConstructor:DisabledAppBarLayoutBehavior.kt$DisabledAppBarLayoutBehavior$()</ID>
    <ID>EmptyFunctionBlock:AddAttributeTermsFragment.kt$AddAttributeTermsFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:ApplicationLifecycleMonitor.kt$ApplicationLifecycleMonitor${}</ID>
    <ID>EmptyFunctionBlock:DiscoverReadersAction.kt$&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:MyStoreFragment.kt$MyStoreFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:SequenceExt.kt$OtherwiseIgnore${ }</ID>
    <ID>EnumEntryNameCase:WooLog.kt$WooLog.LogLevel$d</ID>
    <ID>EnumEntryNameCase:WooLog.kt$WooLog.LogLevel$e</ID>
    <ID>EnumEntryNameCase:WooLog.kt$WooLog.LogLevel$i</ID>
    <ID>EnumEntryNameCase:WooLog.kt$WooLog.LogLevel$v</ID>
    <ID>EnumEntryNameCase:WooLog.kt$WooLog.LogLevel$w</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel$d</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel$e</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel$i</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel$v</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel$w</ID>
    <ID>ExplicitItLambdaParameter:WCSSRModelExt.kt${ it -&gt; it.keys().forEach { key -&gt; val tableData = it.optJSONObject(key) tableData?.let { data -&gt; sb.append("$key: " + parseFormatSingleTableData(data)) } } }</ID>
    <ID>ExplicitItLambdaParameter:WCSSRModelExt.kt${ it -&gt; sb.append(parseFormatTablesData(it, "woocommerce")) .append(parseFormatTablesData(it, "other")) }</ID>
    <ID>ExplicitItLambdaParameter:WCSSRModelExt.kt${ it -&gt; try { sb.append(formatEnvironmentData(JSONObject(it))) } catch (e: JSONException) { WooLog.e(WooLog.T.UTILS, e) } }</ID>
    <ID>ExplicitItLambdaParameter:ZendeskTicketRepository.kt$ZendeskTicketRepository${ it -&gt; // Add wpcom tag if at least one site is WordPress.com site if (it.any { it.isWPCom }) { tags.add(ZendeskTags.wpComTag) } // Add Jetpack tag if at least one site is Jetpack connected. Even if a site is Jetpack connected, // it does not necessarily mean that user is connected with the REST API, but we don't care about that here if (it.any { it.isJetpackConnected }) { tags.add(ZendeskTags.jetpackTag) } // Find distinct plans and add them val plans = it.asSequence().mapNotNull { it.planShortName }.distinct().toList() tags.addAll(plans) }</ID>
    <ID>Filename:JSONArray+iterator.kt$com.woocommerce.android.e2e.helpers.util.JSONArray+iterator.kt</ID>
    <ID>ForEachOnRange:AlignedDividerDecoration.kt$AlignedDividerDecoration$(0..adjustedChildCount) .map { parent.getChildAt(it) }</ID>
    <ID>ForbiddenComment:AddressUtils.kt$AddressUtils$// TODO: soon to be deprecated</ID>
    <ID>ForbiddenComment:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$// TODO: Once we start supporting countries other than the US, we'll need to verify what currency the shipping labels purchases use</ID>
    <ID>ForbiddenComment:GroupedProductListRepository.kt$GroupedProductListRepository$// TODO: add tracking event</ID>
    <ID>ForbiddenComment:HelpActivity.kt$HelpActivity$/* TODO: for now we simply link to the online woo mobile support documentation, but we should show the Zendesk FAQ once it's ready zendeskHelper .showZendeskHelpCenter(this, originFromExtras, selectedSiteOrNull(), extraTagsFromExtras) */</ID>
    <ID>ForbiddenComment:IssueRefundFragment.kt$IssueRefundFragment$// TODO: Temporary; it will be used again in a future release - do not remove</ID>
    <ID>ForbiddenComment:IssueRefundFragment.kt$IssueRefundFragment.RefundPageAdapter$// TODO: Temporarily unused; it will be used again in a future release - do not remove</ID>
    <ID>ForbiddenComment:IssueRefundViewModel.kt$IssueRefundViewModel$// TODO: Temporarily unused; it will be used again in a future release - do not remove</ID>
    <ID>ForbiddenComment:LoginActivity.kt$LoginActivity$// TODO: Hook for smartlock, if using</ID>
    <ID>ForbiddenComment:LoginActivity.kt$LoginActivity$// TODO: Signup</ID>
    <ID>ForbiddenComment:LoginActivity.kt$LoginActivity$// TODO: Support self-signed SSL sites and show dialog (only needed when XML-RPC support is added)</ID>
    <ID>ForbiddenComment:LoginAnalyticsTracker.kt$LoginAnalyticsTracker$// TODO: Account creation</ID>
    <ID>ForbiddenComment:MainActivity.kt$MainActivity$// TODO: Using deprecated ProgressDialog temporarily - a proper post-login experience will replace this</ID>
    <ID>ForbiddenComment:MainPresenter.kt$MainPresenter$// TODO: Notify the user of the problem</ID>
    <ID>ForbiddenComment:MyStoreStatsView.kt$MyStoreStatsView$// TODO: add a custom empty view</ID>
    <ID>ForbiddenComment:OrderDetailPaymentInfoView.kt$OrderDetailPaymentInfoView$// TODO: Once the refund by amount is supported again, this condition will need to be updated</ID>
    <ID>ForbiddenComment:OrderDetailRefundsAdapter.kt$OrderDetailRefundsAdapter.ViewHolder$// TODO: open refund detail screen</ID>
    <ID>ForbiddenComment:ProductDetailFragment.kt$ProductDetailFragment$// TODO: add tracking events here</ID>
    <ID>ForbiddenComment:ProductDetailRepository.kt$ProductDetailRepository$// TODO: add event to track sku availability success</ID>
    <ID>ForbiddenComment:RefundByItemsFragment.kt$RefundByItemsFragment$// TODO: Temporarily disabled, this will be used in a future release - do not remove</ID>
    <ID>ForbiddenComment:ShippingCarrierRatesViewModel.kt$ShippingCarrierRatesViewModel$// TODO: Once we start supporting countries other than the US, we'll need to verify what currency the shipping labels purchases use</ID>
    <ID>FunctionOnlyReturningConstant:Screen.kt$Screen.Companion$fun isVisible(): Boolean</ID>
    <ID>KdocWrapping:AddProductCategoryViewModel.kt$AddProductCategoryViewModel$/** No action needed */</ID>
    <ID>LargeClass:ProductDetailViewModel.kt$ProductDetailViewModel : ScopedViewModel</ID>
    <ID>LongMethod:AddOrderShipmentTrackingFragment.kt$AddOrderShipmentTrackingFragment$private fun setupObservers(binding: FragmentAddShipmentTrackingBinding)</ID>
    <ID>LongMethod:CardReaderDetailFragment.kt$CardReaderDetailFragment$private fun observeViewState(binding: FragmentCardReaderDetailBinding)</ID>
    <ID>LongMethod:CardReaderPaymentDialogFragment.kt$CardReaderPaymentDialogFragment$private fun initObservers(binding: CardReaderPaymentDialogBinding)</ID>
    <ID>LongMethod:CreateShippingLabelFragment.kt$CreateShippingLabelFragment$private fun subscribeObservers(binding: FragmentCreateShippingLabelBinding)</ID>
    <ID>LongMethod:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$private fun initializeStateMachine()</ID>
    <ID>LongMethod:EditShippingLabelPaymentFragment.kt$EditShippingLabelPaymentFragment$private fun setupObservers(binding: FragmentEditShippingLabelPaymentBinding)</ID>
    <ID>LongMethod:LoginNoJetpackFragment.kt$LoginNoJetpackFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:OrderDetailFragment.kt$OrderDetailFragment$private fun setupObservers(viewModel: OrderDetailViewModel)</ID>
    <ID>LongMethod:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$fun bind(shippingLabel: ShippingLabel)</ID>
    <ID>LongMethod:OrderNavigator.kt$OrderNavigator$fun navigate(fragment: Fragment, target: OrderNavigationTarget)</ID>
    <ID>LongMethod:Product.kt$fun Product.toDataModel(storedProductModel: WCProductModel? = null): WCProductModel</ID>
    <ID>LongMethod:Product.kt$fun WCProductModel.toAppModel(): Product</ID>
    <ID>LongMethod:ProductDetailCardBuilder.kt$ProductDetailCardBuilder$private fun Product.shipping(): ProductProperty?</ID>
    <ID>LongMethod:ProductInventoryFragment.kt$ProductInventoryFragment$private fun setupObservers(viewModel: ProductInventoryViewModel)</ID>
    <ID>LongMethod:ProductNavigator.kt$ProductNavigator$fun navigate(fragment: Fragment, target: ProductNavigationTarget)</ID>
    <ID>LongMethod:ProductPricingFragment.kt$ProductPricingFragment$private fun setupViews(currency: String, isCurrencyPrefix: Boolean, pricingData: PricingData)</ID>
    <ID>LongMethod:RefundByItemsFragment.kt$RefundByItemsFragment$private fun setupObservers()</ID>
    <ID>LongMethod:ShippingCarrierRatesAdapter.kt$ShippingCarrierRatesAdapter.RateListAdapter.RateViewHolder$private fun bindOptions(rateItem: ShippingRateItem, isExpanded: Boolean)</ID>
    <ID>LongMethod:ShippingCarrierRatesViewModel.kt$ShippingCarrierRatesViewModel$@Suppress("UNCHECKED_CAST") private fun generateRateModels(packageRates: List&lt;ShippingPackage&gt;): List&lt;PackageRateListItem&gt;</ID>
    <ID>LongMethod:ShippingLabelsStateMachine.kt$ShippingLabelsStateMachine$private fun createStateMachine(initialState: State = State.Idle)</ID>
    <ID>LongMethod:WCEmptyView.kt$WCEmptyView$fun show( type: EmptyViewType, searchQueryOrFilter: String? = null, onButtonClick: (() -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:ShippingLabelRepository.kt$ShippingLabelRepository$( orderId: Long, origin: Address, destination: Address, packages: List&lt;ShippingLabelPackage&gt;, rates: List&lt;ShippingRate&gt;, customsPackages: List&lt;CustomsPackage&gt;? )</ID>
    <ID>MagicNumber:AttributeTermsListAdapter.kt$AttributeTermsListAdapter$300</ID>
    <ID>MagicNumber:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$1000.0</ID>
    <ID>MagicNumber:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$4</ID>
    <ID>MagicNumber:CurrencyAmountDialog.kt$CurrencyAmountDialog$200</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$7</ID>
    <ID>MagicNumber:ListExt.kt$3</ID>
    <ID>MagicNumber:MainBottomNavigationView.kt$MainBottomNavigationView$3</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$1.5f</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$100</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$10f</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$3</ID>
    <ID>MagicNumber:OfflineStatusBarView.kt$OfflineStatusBarView$2000</ID>
    <ID>MagicNumber:OrderDetailCustomerInfoView.kt$OrderDetailCustomerInfoView$180F</ID>
    <ID>MagicNumber:OrderDetailCustomerInfoView.kt$OrderDetailCustomerInfoView$200</ID>
    <ID>MagicNumber:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$180F</ID>
    <ID>MagicNumber:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$200</ID>
    <ID>MagicNumber:OrderListFragment.kt$OrderListFragment$100</ID>
    <ID>MagicNumber:OrderListViewModel.kt$OrderListViewModel$1_000</ID>
    <ID>MagicNumber:ProductImagesNotificationHandler.kt$ProductImagesNotificationHandler$100</ID>
    <ID>MagicNumber:ProductTagsAdapter.kt$ProductTagsAdapter.ProductTagViewHolder$3</ID>
    <ID>MagicNumber:ReviewDetailFragment.kt$ReviewDetailFragment$256</ID>
    <ID>MagicNumber:ReviewListAdapter.kt$ReviewListAdapter.ItemViewHolder$100F</ID>
    <ID>MagicNumber:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$3</ID>
    <ID>MagicNumber:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$4</ID>
    <ID>MagicNumber:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$5</ID>
    <ID>MagicNumber:ShippingCustomsViewModel.kt$ShippingCustomsViewModel$2500.0</ID>
    <ID>MagicNumber:ShippingLabel.kt$ShippingLabel$30</ID>
    <ID>MagicNumber:SkeletonView.kt$SkeletonView$250</ID>
    <ID>MagicNumber:StringExt.kt$160</ID>
    <ID>MagicNumber:StyleAttrUtils.kt$StyleAttrUtils$26</ID>
    <ID>MagicNumber:TagView.kt$TagView$4</ID>
    <ID>MagicNumber:TimeGroup.kt$TimeGroup.Companion$2</ID>
    <ID>MagicNumber:UnreadItemDecoration.kt$UnreadItemDecoration$3</ID>
    <ID>MagicNumber:ViewUtils.kt$0.5f</ID>
    <ID>MagicNumber:WCEmptyView.kt$WCEmptyView$50L</ID>
    <ID>MagicNumber:WCMaterialOutlinedEditTextView.kt$WCMaterialOutlinedEditTextView$100</ID>
    <ID>MagicNumber:WCProductImageGalleryView.kt$WCProductImageGalleryView.ImageViewHolder$0.5F</ID>
    <ID>MagicNumber:WooCommerceGlideModule.kt$WooCommerceGlideModule$1024</ID>
    <ID>MagicNumber:WooWellSqlConfig.kt$WooWellSqlConfig$1024L</ID>
    <ID>MagicNumber:WooWellSqlConfig.kt$WooWellSqlConfig$5L</ID>
    <ID>MatchingDeclarationName:NavController.kt$CallThrottler</ID>
    <ID>MaximumLineLength:CardReaderOnboardingChecker.kt$CardReaderOnboardingChecker$ </ID>
    <ID>MaximumLineLength:MainSettingsModule.kt$MainSettingsModule$ </ID>
    <ID>MaximumLineLength:PaymentsHubDepositSummaryStateMapper.kt$PaymentsHubDepositSummaryStateMapper$ </ID>
    <ID>MaximumLineLength:ProductSelectorViewModel.kt$ProductSelectorViewModel$ </ID>
    <ID>MayBeConst:TestBase.kt$TestBase.Companion$val wireMockPort = 8080</ID>
    <ID>MemberNameEqualsClassName:CurrencyFormatter.kt$CurrencyFormatter.Companion$// Formats the value to two decimal places private val currencyFormatter: DecimalFormat by lazy { DecimalFormat("0.00") }</ID>
    <ID>MemberNameEqualsClassName:SkeletonView.kt$SkeletonView$private lateinit var skeletonView: View</ID>
    <ID>NestedBlockDepth:ProductSelectionListViewModel.kt$ProductSelectionListViewModel$private suspend fun fetchProductList( searchQuery: String? = null, loadMore: Boolean = false )</ID>
    <ID>NestedBlockDepth:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun getItemViewType(position: Int): Int</ID>
    <ID>NestedBlockDepth:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int)</ID>
    <ID>NoSemicolons:CardReaderDetailFragment.kt$CardReaderDetailFragment$;</ID>
    <ID>NoWildcardImports:AboutConfigBuilder.kt$import com.automattic.about.model.*</ID>
    <ID>NoWildcardImports:AddOrderNoteViewModel.kt$import com.woocommerce.android.viewmodel.MultiLiveEvent.Event.*</ID>
    <ID>NoWildcardImports:AddonTestFixtures.kt$import org.wordpress.android.fluxc.domain.Addon.HasAdjustablePrice.Price.Adjusted.*</ID>
    <ID>NoWildcardImports:AddonsExt.kt$import org.wordpress.android.fluxc.domain.Addon.HasAdjustablePrice.Price.Adjusted.PriceType.*</ID>
    <ID>NoWildcardImports:CreateShippingLabelEvent.kt$import com.woocommerce.android.model.*</ID>
    <ID>NoWildcardImports:CreateShippingLabelTestUtils.kt$import com.woocommerce.android.model.*</ID>
    <ID>NoWildcardImports:EditShippingLabelPaymentViewModelTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.EditShippingLabelPaymentViewModel.*</ID>
    <ID>NoWildcardImports:FeatureAnnouncementDialogFragment.kt$import android.view.*</ID>
    <ID>NoWildcardImports:FeatureFeedbackSettingsTest.kt$import com.woocommerce.android.model.FeatureFeedbackSettings.*</ID>
    <ID>NoWildcardImports:InfiniteListHandler.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:MagicLinkInterceptRepository.kt$import com.woocommerce.android.model.RequestResult.*</ID>
    <ID>NoWildcardImports:MagicLinkInterceptRepository.kt$import org.wordpress.android.fluxc.store.AccountStore.*</ID>
    <ID>NoWildcardImports:MarkAllReviewsAsSeen.kt$import com.woocommerce.android.model.RequestResult.*</ID>
    <ID>NoWildcardImports:MoveShippingItemViewModel.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.MoveShippingItemViewModel.DestinationPackage.*</ID>
    <ID>NoWildcardImports:NumberRounding.kt$import kotlin.math.*</ID>
    <ID>NoWildcardImports:PaymentManager.kt$import com.woocommerce.android.cardreader.payments.CardPaymentStatus.*</ID>
    <ID>NoWildcardImports:PrintShippingLabelCustomsFormFragment.kt$import com.woocommerce.android.viewmodel.MultiLiveEvent.Event.*</ID>
    <ID>NoWildcardImports:ProductImagesUploadWorker.kt$import com.woocommerce.android.media.MediaFilesRepository.UploadResult.*</ID>
    <ID>NoWildcardImports:ProductImagesUploadWorker.kt$import kotlinx.coroutines.*</ID>
    <ID>NoWildcardImports:ProductImagesUploadWorker.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:Refund.kt$import org.wordpress.android.fluxc.model.refunds.WCRefundModel.*</ID>
    <ID>NoWildcardImports:ReviewListRepository.kt$import com.woocommerce.android.model.RequestResult.*</ID>
    <ID>NoWildcardImports:ReviewListRepository.kt$import org.wordpress.android.fluxc.store.NotificationStore.*</ID>
    <ID>NoWildcardImports:ReviewModerationHandler.kt$import com.woocommerce.android.model.ActionStatus.*</ID>
    <ID>NoWildcardImports:ReviewModerationHandler.kt$import kotlinx.coroutines.*</ID>
    <ID>NoWildcardImports:ReviewModerationHandler.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:ShippingLabelsStateMachine.kt$import com.woocommerce.android.model.*</ID>
    <ID>NoWildcardImports:ShippingLabelsStateMachine.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.Step.*</ID>
    <ID>NoWildcardImports:ShippingLabelsStateMachine.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.StepStatus.*</ID>
    <ID>NoWildcardImports:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.model.*</ID>
    <ID>NoWildcardImports:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.*</ID>
    <ID>NoWildcardImports:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.Step.*</ID>
    <ID>NoWildcardImports:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.StepStatus.*</ID>
    <ID>ParameterListWrapping:MainSettingsModule.kt$MainSettingsModule$(mainSettingsPresenter: MainSettingsPresenter)</ID>
    <ID>PrintStackTrace:TestIdler.kt$TestIdler$e</ID>
    <ID>ReturnCount:AddOrderShipmentTrackingViewModel.kt$AddOrderShipmentTrackingViewModel$fun onAddButtonTapped()</ID>
    <ID>ReturnCount:ChromeCustomTabUtils.kt$ChromeCustomTabUtils$private fun canUseCustomTabs(context: Context): Boolean</ID>
    <ID>ReturnCount:DrawableMatcher.kt$DrawableMatcher$override fun matchesSafely(item: View?): Boolean</ID>
    <ID>ReturnCount:EditShippingLabelPackagesViewModel.kt$EditShippingLabelPackagesViewModel$suspend fun fetchVariationIfNeeded(productId: Long, variationId: Long): Boolean</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>ReturnCount:OrderListAdapter.kt$&lt;no name provided&gt;$override fun areItemsTheSame(oldItem: OrderListItemUIType, newItem: OrderListItemUIType): Boolean</ID>
    <ID>ReturnCount:Product.kt$Product$fun hasAttributeChanges(updatedProduct: Product?): Boolean</ID>
    <ID>ReturnCount:Product.kt$Product$private fun isSameCategories(updatedCategories: List&lt;ProductCategory&gt;): Boolean</ID>
    <ID>ReturnCount:Product.kt$Product$private fun isSameTags(updatedTags: List&lt;ProductTag&gt;): Boolean</ID>
    <ID>ReturnCount:ProductDetailViewModel.kt$ProductDetailViewModel$fun onBackButtonClickedProductDetail(): Boolean</ID>
    <ID>ReturnCount:ProductDetailViewModel.kt$ProductDetailViewModel$fun renameAttributeInDraft(attributeId: Long, oldAttributeName: String, newAttributeName: String): Boolean</ID>
    <ID>ReturnCount:ProductHelper.kt$ProductHelper$fun productOrVariationId(productId: Long?, variationId: Long?): Long</ID>
    <ID>ReturnCount:ProductImageMap.kt$ProductImageMap$fun get(remoteProductId: Long): String?</ID>
    <ID>ReturnCount:ReviewListAdapter.kt$ReviewListAdapter$fun getItemTypeAtRecyclerPosition(position: Int): ItemType</ID>
    <ID>ReturnCount:ReviewListAdapter.kt$ReviewListAdapter$private fun isSameList(reviews: List&lt;ProductReview&gt;): Boolean</ID>
    <ID>ReturnCount:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun getItemViewType(position: Int): Int</ID>
    <ID>ReturnCount:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int)</ID>
    <ID>ReturnCount:StringExt.kt$fun String.fastStripHtml(): String</ID>
    <ID>ReturnCount:StringExt.kt$fun String.semverCompareTo(otherVersion: String): Int</ID>
    <ID>ReturnCount:TestBase.kt$LocaleAwareRenderableDate$override fun toString(): String</ID>
    <ID>ReturnCount:WCProductImageGalleryView.kt$WCProductImageGalleryView.ImageGalleryAdapter$private fun isSameImageList(images: List&lt;Product.Image&gt;): Boolean</ID>
    <ID>SerialVersionUIDInSerializableClass:InfoScreenFragment.kt$InfoScreenFragment$InfoScreenLinkAction : Serializable</ID>
    <ID>SpreadOperator:OrderDetailFragment.kt$OrderDetailFragment$(event.message, *event.args)</ID>
    <ID>SpreadOperator:RefundSummaryFragment.kt$RefundSummaryFragment$(event.message, *event.args)</ID>
    <ID>SpreadOperator:ShippingLabelRefundFragment.kt$ShippingLabelRefundFragment$(event.message, *event.args)</ID>
    <ID>SpreadOperator:UiHelpers.kt$UiHelpers$( uiString.stringRes, *uiString.params.map { value -&gt; getTextOfUiString( context, value ) }.toTypedArray() )</ID>
    <ID>SwallowedException:ActivityUtils.kt$ActivityUtils$exception: ActivityNotFoundException</ID>
    <ID>SwallowedException:AppPrefs.kt$AppPrefs$ex: Throwable</ID>
    <ID>SwallowedException:AppRatingDialog.kt$AppRatingDialog$e: android.content.ActivityNotFoundException</ID>
    <ID>SwallowedException:EditShippingLabelAddressFragment.kt$EditShippingLabelAddressFragment$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:FileDownloader.kt$FileDownloader$e: InterruptedIOException</ID>
    <ID>SwallowedException:PackageUtils.kt$PackageUtils$e: ClassNotFoundException</ID>
    <ID>SwallowedException:PackageUtils.kt$PackageUtils$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:PrintShippingLabelCustomsFormViewModelTest.kt$PrintShippingLabelCustomsFormViewModelTest$e: CancellationException</ID>
    <ID>SwallowedException:ProductDownloadDetailsViewModel.kt$ProductDownloadDetailsViewModel$e: URISyntaxException</ID>
    <ID>SwallowedException:ProductListViewModel.kt$ProductListViewModel$e: CancellationException</ID>
    <ID>SwallowedException:ProductSelectionListViewModel.kt$ProductSelectionListViewModel$e: CancellationException</ID>
    <ID>SwallowedException:ProductShippingClassViewModel.kt$ProductShippingClassViewModel$e: CancellationException</ID>
    <ID>SwallowedException:RecyclerViewMatcher.kt$RecyclerViewMatcher.&lt;no name provided&gt;$var4: Resources.NotFoundException</ID>
    <ID>SwallowedException:Screen.kt$Screen$e: Throwable</ID>
    <ID>SwallowedException:Screen.kt$Screen$e: java.lang.Exception</ID>
    <ID>SwallowedException:Screen.kt$Screen$ex: Exception</ID>
    <ID>SwallowedException:Screen.kt$Screen.Companion$e: Throwable</ID>
    <ID>SwallowedException:StringDateFormatExt.kt$e: Exception</ID>
    <ID>SwallowedException:StringUtils.kt$StringUtils$e: IOException</ID>
    <ID>SwallowedException:StringUtils.kt$StringUtils$e: NotFoundException</ID>
    <ID>SwallowedException:WooLogViewerActivity.kt$WooLogViewerActivity$ex: android.content.ActivityNotFoundException</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ProductCatalogVisibilityFragment.kt$ProductCatalogVisibilityFragment$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ProductStatusFragment.kt$ProductStatusFragment$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShippingLabelPaymentMethodsAdapter.kt$ShippingLabelPaymentMethodsAdapter.PaymentMethodViewHolder$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShippingLabelServicePackageAdapter.kt$ShippingLabelServicePackageAdapter$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShippingPackagesAdapter.kt$ShippingPackagesAdapter$IllegalArgumentException()</ID>
    <ID>TooGenericExceptionCaught:Address.kt$Address$e: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:AppPrefs.kt$AppPrefs$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:DateUtils.kt$DateUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DateUtils.kt$DateUtils$e: IndexOutOfBoundsException</ID>
    <ID>TooGenericExceptionCaught:FileDownloader.kt$FileDownloader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FileUtils.kt$FileUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OrderShipmentTrackingHelper.kt$OrderShipmentTrackingHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PhoneUtils.kt$PhoneUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:StringDateFormatExt.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TokenProvider.kt$TokenProvider$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:WooLogViewerActivity.kt$WooLogViewerActivity$e: Exception</ID>
    <ID>TooGenericExceptionThrown:ActionableEmptyView.kt$ActionableEmptyView$throw RuntimeException("$context: ActionableEmptyView must have a title (aevTitle)")</ID>
    <ID>TopLevelPropertyNaming:AnalyticsHubTestFixtures.kt$const val testVisitorsCount = 150</ID>
    <ID>UseCheckOrError:BlazeCampaignTargetSelectionViewModel.kt$BlazeCampaignTargetSelectionViewModel$throw IllegalStateException("Location selection should not use this view model")</ID>
    <ID>UseCheckOrError:CardReaderOnboardingChecker.kt$CardReaderOnboardingChecker$throw IllegalStateException("Developer error:`preferredPlugin` should be WCPay")</ID>
    <ID>UseCheckOrError:CardReaderPaymentViewModel.kt$CardReaderPaymentViewModel$throw IllegalStateException("Accessing refund amount on $param flow")</ID>
    <ID>UseCheckOrError:CheckDigitRemoverFactory.kt$CheckDigitRemoverFactory$throw IllegalStateException( "Cannot remove check digit for this barcode format: ${barcodeFormat.formatName}" )</ID>
    <ID>UseCheckOrError:LiveDataDelegate.kt$LiveDataDelegate$throw(IllegalStateException("Multiple observers registered but only one is supported."))</ID>
    <ID>UseCheckOrError:MoveShippingItemViewModel.kt$MoveShippingItemViewModel$throw IllegalStateException("move button listener invoked while no package is selected")</ID>
    <ID>UseCheckOrError:MultipleCardReadersFoundAdapter.kt$MultipleCardReadersFoundAdapter$throw IllegalStateException("The view type '$viewType' needs to be handled")</ID>
    <ID>UseCheckOrError:OrderListAdapter.kt$OrderListAdapter$throw IllegalStateException("The view type '$viewType' needs to be handled")</ID>
    <ID>UseCheckOrError:Section.kt$Section$throw IllegalStateException("Missing 'empty mState' resource id")</ID>
    <ID>UseCheckOrError:Section.kt$Section$throw IllegalStateException("Missing 'failed mState' resource id")</ID>
    <ID>UseCheckOrError:Section.kt$Section$throw IllegalStateException("Missing 'loading mState' resource id")</ID>
    <ID>UseCheckOrError:SitePickerAdapter.kt$SitePickerAdapter$throw IllegalStateException("Wrong view type: $viewType")</ID>
    <ID>UseCheckOrError:SkeletonView.kt$SkeletonView$throw IllegalStateException("Source view isn't attached")</ID>
    <ID>UseCheckOrError:StatsTimeRangeSelection.kt$StatsTimeRangeSelection.Factory$throw IllegalStateException("Custom selection type should use the correct constructor")</ID>
    <ID>UseRequire:AddProductElementView.kt$AddProductElementView$throw IllegalArgumentException("AddProductElementView must have a text for its button (buttonText)")</ID>
    <ID>UseRequire:AlignedDividerDecoration.kt$AlignedDividerDecoration$throw IllegalArgumentException("Invalid orientation. It should either be HORIZONTAL or VERTICAL.")</ID>
    <ID>UseRequire:StatelessSection.kt$StatelessSection$throw IllegalArgumentException("Stateless section shouldn't have a failed state resource")</ID>
    <ID>UseRequire:StatelessSection.kt$StatelessSection$throw IllegalArgumentException("Stateless section shouldn't have a loading state resource")</ID>
    <ID>UseRequire:StatelessSection.kt$StatelessSection$throw IllegalArgumentException("Stateless section shouldn't have an empty state resource")</ID>
    <ID>VariableNaming:ScopedViewModel.kt$ScopedViewModel$protected open val _event: MutableLiveData&lt;Event&gt; = MultiLiveEvent()</ID>
    <ID>WildcardImport:AboutConfigBuilder.kt$import com.automattic.about.model.*</ID>
    <ID>WildcardImport:AddOrderNoteViewModel.kt$import com.woocommerce.android.viewmodel.MultiLiveEvent.Event.*</ID>
    <ID>WildcardImport:AddonTestFixtures.kt$import org.wordpress.android.fluxc.domain.Addon.HasAdjustablePrice.Price.Adjusted.*</ID>
    <ID>WildcardImport:AddonsExt.kt$import org.wordpress.android.fluxc.domain.Addon.HasAdjustablePrice.Price.Adjusted.PriceType.*</ID>
    <ID>WildcardImport:CreateShippingLabelEvent.kt$import com.woocommerce.android.model.*</ID>
    <ID>WildcardImport:CreateShippingLabelTestUtils.kt$import com.woocommerce.android.model.*</ID>
    <ID>WildcardImport:EditShippingLabelPaymentViewModelTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.EditShippingLabelPaymentViewModel.*</ID>
    <ID>WildcardImport:FeatureAnnouncementDialogFragment.kt$import android.view.*</ID>
    <ID>WildcardImport:FeatureFeedbackSettingsTest.kt$import com.woocommerce.android.model.FeatureFeedbackSettings.*</ID>
    <ID>WildcardImport:InfiniteListHandler.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:MagicLinkInterceptRepository.kt$import com.woocommerce.android.model.RequestResult.*</ID>
    <ID>WildcardImport:MagicLinkInterceptRepository.kt$import org.wordpress.android.fluxc.store.AccountStore.*</ID>
    <ID>WildcardImport:MarkAllReviewsAsSeen.kt$import com.woocommerce.android.model.RequestResult.*</ID>
    <ID>WildcardImport:MoveShippingItemViewModel.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.MoveShippingItemViewModel.DestinationPackage.*</ID>
    <ID>WildcardImport:NumberRounding.kt$import kotlin.math.*</ID>
    <ID>WildcardImport:PaymentManager.kt$import com.woocommerce.android.cardreader.payments.CardPaymentStatus.*</ID>
    <ID>WildcardImport:PrintShippingLabelCustomsFormFragment.kt$import com.woocommerce.android.viewmodel.MultiLiveEvent.Event.*</ID>
    <ID>WildcardImport:ProductImagesUploadWorker.kt$import com.woocommerce.android.media.MediaFilesRepository.UploadResult.*</ID>
    <ID>WildcardImport:ProductImagesUploadWorker.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:ProductImagesUploadWorker.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:Refund.kt$import org.wordpress.android.fluxc.model.refunds.WCRefundModel.*</ID>
    <ID>WildcardImport:ReviewListRepository.kt$import com.woocommerce.android.model.RequestResult.*</ID>
    <ID>WildcardImport:ReviewListRepository.kt$import org.wordpress.android.fluxc.store.NotificationStore.*</ID>
    <ID>WildcardImport:ReviewModerationHandler.kt$import com.woocommerce.android.model.ActionStatus.*</ID>
    <ID>WildcardImport:ReviewModerationHandler.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:ReviewModerationHandler.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:ShippingLabelsStateMachine.kt$import com.woocommerce.android.model.*</ID>
    <ID>WildcardImport:ShippingLabelsStateMachine.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.Step.*</ID>
    <ID>WildcardImport:ShippingLabelsStateMachine.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.StepStatus.*</ID>
    <ID>WildcardImport:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.model.*</ID>
    <ID>WildcardImport:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.*</ID>
    <ID>WildcardImport:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.Step.*</ID>
    <ID>WildcardImport:ShippingLabelsStateMachineTest.kt$import com.woocommerce.android.ui.orders.shippinglabels.creation.ShippingLabelsStateMachine.StepStatus.*</ID>
  </CurrentIssues>
</SmellBaseline>
