<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:ProductImageViewerFragment.kt$ProductImageViewerFragment$(show &amp;&amp; binding.fakeToolbar.visibility == View.VISIBLE) || (!show &amp;&amp; binding.fakeToolbar.visibility != View.VISIBLE)</ID>
    <ID>ComplexCondition:ReviewListAdapter.kt$ReviewListAdapter$it.remoteId == review.remoteId &amp;&amp; it.review == review.review &amp;&amp; it.read == (review.read != false) &amp;&amp; it.status == review.status</ID>
    <ID>ComplexMethod:AddOrderShipmentTrackingFragment.kt$AddOrderShipmentTrackingFragment$private fun setupObservers(binding: FragmentAddShipmentTrackingBinding)</ID>
    <ID>ComplexMethod:CreateShippingLabelFragment.kt$CreateShippingLabelFragment$private fun subscribeObservers(binding: FragmentCreateShippingLabelBinding)</ID>
    <ID>ComplexMethod:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$private fun initializeStateMachine()</ID>
    <ID>ComplexMethod:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$private fun updateViewState(stateMachineData: StateMachineData)</ID>
    <ID>ComplexMethod:MainActivity.kt$MainActivity$ override fun onDestinationChanged(controller: NavController, destination: NavDestination, arguments: Bundle?)</ID>
    <ID>ComplexMethod:MyStoreStatsView.kt$MyStoreStatsView$private fun updateChartView()</ID>
    <ID>ComplexMethod:Order.kt$fun WCOrderModel.toAppModel(): Order</ID>
    <ID>ComplexMethod:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$fun bind(shippingLabel: ShippingLabel)</ID>
    <ID>ComplexMethod:OrderListItemDataSource.kt$OrderListItemDataSource$override fun getItemIdentifiers( listDescriptor: WCOrderListDescriptor, remoteItemIds: List&lt;RemoteId&gt;, isListFullyFetched: Boolean ): List&lt;OrderListItemIdentifier&gt;</ID>
    <ID>ComplexMethod:OrderNavigator.kt$OrderNavigator$fun navigate(fragment: Fragment, target: OrderNavigationTarget)</ID>
    <ID>ComplexMethod:Product.kt$Product$fun isSameProduct(product: Product): Boolean</ID>
    <ID>ComplexMethod:Product.kt$fun Product.toDataModel(storedProductModel: WCProductModel? = null): WCProductModel</ID>
    <ID>ComplexMethod:ProductDetailViewModel.kt$ProductDetailViewModel$ fun updateProductDraft( description: String? = null, shortDescription: String? = null, title: String? = null, sku: String? = null, slug: String? = null, manageStock: Boolean? = null, stockStatus: ProductStockStatus? = null, soldIndividually: Boolean? = null, stockQuantity: Double? = null, backorderStatus: ProductBackorderStatus? = null, regularPrice: BigDecimal? = null, salePrice: BigDecimal? = null, isOnSale: Boolean? = null, isVirtual: Boolean? = null, isSaleScheduled: Boolean? = null, saleStartDate: Date? = null, saleEndDate: Date? = viewState.productDraft?.saleEndDateGmt, taxStatus: ProductTaxStatus? = null, taxClass: String? = null, length: Float? = null, width: Float? = null, height: Float? = null, weight: Float? = null, shippingClass: String? = null, images: List&lt;Product.Image&gt;? = null, shippingClassId: Long? = null, productStatus: ProductStatus? = null, catalogVisibility: ProductCatalogVisibility? = null, isFeatured: Boolean? = null, reviewsAllowed: Boolean? = null, purchaseNote: String? = null, externalUrl: String? = null, buttonText: String? = null, menuOrder: Int? = null, categories: List&lt;ProductCategory&gt;? = null, tags: List&lt;ProductTag&gt;? = null, type: String? = null, groupedProductIds: List&lt;Long&gt;? = null, upsellProductIds: List&lt;Long&gt;? = null, crossSellProductIds: List&lt;Long&gt;? = null, downloads: List&lt;ProductFile&gt;? = null, downloadLimit: Long? = null, downloadExpiry: Int? = null, isDownloadable: Boolean? = null, attributes: List&lt;ProductAttribute&gt;? = null, numVariation: Int? = null )</ID>
    <ID>ComplexMethod:ProductImagesFragment.kt$ProductImagesFragment$private fun setupObservers(viewModel: ProductImagesViewModel)</ID>
    <ID>ComplexMethod:ProductNavigator.kt$ProductNavigator$fun navigate(fragment: Fragment, target: ProductNavigationTarget)</ID>
    <ID>ComplexMethod:ProductPricingFragment.kt$ProductPricingFragment$private fun setupViews(currency: String, isCurrencyPrefix: Boolean, pricingData: PricingData)</ID>
    <ID>ComplexMethod:ProductVariation.kt$ProductVariation$fun toDataModel(cachedVariation: WCProductVariationModel? = null): WCProductVariationModel</ID>
    <ID>ComplexMethod:ProductVariation.kt$ProductVariation$override fun equals(other: Any?): Boolean</ID>
    <ID>ComplexMethod:ReviewListAdapter.kt$ReviewListAdapter$fun setReviews(reviews: List&lt;ProductReview&gt;)</ID>
    <ID>ComplexMethod:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun getItemViewType(position: Int): Int</ID>
    <ID>ComplexMethod:ShippingCustomsViewModel.kt$ShippingCustomsViewModel$private fun CustomsPackage.validate(): PackageValidationState</ID>
    <ID>ComplexMethod:SitePickerActivity.kt$SitePickerActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:SitePickerActivity.kt$SitePickerActivity$override fun showStoreList(wcSites: List&lt;SiteModel&gt;)</ID>
    <ID>ComplexMethod:WCEmptyView.kt$WCEmptyView$fun show( type: EmptyViewType, searchQueryOrFilter: String? = null, onButtonClick: (() -&gt; Unit)? = null )</ID>
    <ID>EmptyDefaultConstructor:DisabledAppBarLayoutBehavior.kt$DisabledAppBarLayoutBehavior$()</ID>
    <ID>EmptyFunctionBlock:AddAttributeTermsFragment.kt$AddAttributeTermsFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:ApplicationLifecycleMonitor.kt$ApplicationLifecycleMonitor${}</ID>
    <ID>EmptyFunctionBlock:CardReaderManagerImpl.kt$CardReaderManagerImpl.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:DiscoverReadersAction.kt$&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:MyStoreFragment.kt$MyStoreFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:ProductReviewsFragment.kt$ProductReviewsFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SequenceExt.kt$OtherwiseIgnore${ }</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel.d$d</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel.e$e</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel.i$i</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel.v$v</ID>
    <ID>EnumNaming:WooLog.kt$WooLog.LogLevel.w$w</ID>
    <ID>ForbiddenComment:AddressUtils.kt$AddressUtils$// TODO: soon to be deprecated</ID>
    <ID>ForbiddenComment:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$// TODO: Once we start supporting countries other than the US, we'll need to verify what currency the shipping labels purchases use</ID>
    <ID>ForbiddenComment:GroupedProductListRepository.kt$GroupedProductListRepository$// TODO: add tracking event</ID>
    <ID>ForbiddenComment:HelpActivity.kt$HelpActivity$/* TODO: for now we simply link to the online woo mobile support documentation, but we should show the Zendesk FAQ once it's ready zendeskHelper .showZendeskHelpCenter(this, originFromExtras, selectedSiteOrNull(), extraTagsFromExtras) */</ID>
    <ID>ForbiddenComment:IssueRefundFragment.kt$IssueRefundFragment$// TODO: Temporary; it will be used again in a future release - do not remove</ID>
    <ID>ForbiddenComment:IssueRefundFragment.kt$IssueRefundFragment.RefundPageAdapter$// TODO: Temporarily unused; it will be used again in a future release - do not remove</ID>
    <ID>ForbiddenComment:IssueRefundViewModel.kt$IssueRefundViewModel$// TODO: Temporarily unused; it will be used again in a future release - do not remove</ID>
    <ID>ForbiddenComment:LoginActivity.kt$LoginActivity$// TODO: Hook for smartlock, if using</ID>
    <ID>ForbiddenComment:LoginActivity.kt$LoginActivity$// TODO: Signup</ID>
    <ID>ForbiddenComment:LoginActivity.kt$LoginActivity$// TODO: Support self-signed SSL sites and show dialog (only needed when XML-RPC support is added)</ID>
    <ID>ForbiddenComment:LoginAnalyticsTracker.kt$LoginAnalyticsTracker$// TODO: Account creation</ID>
    <ID>ForbiddenComment:MainActivity.kt$MainActivity$// TODO: Using deprecated ProgressDialog temporarily - a proper post-login experience will replace this</ID>
    <ID>ForbiddenComment:MainPresenter.kt$MainPresenter$// TODO: Notify the user of the problem</ID>
    <ID>ForbiddenComment:MyStoreStatsView.kt$MyStoreStatsView$// TODO: add a custom empty view</ID>
    <ID>ForbiddenComment:OrderDetailPaymentInfoView.kt$OrderDetailPaymentInfoView$// TODO: Once the refund by amount is supported again, this condition will need to be updated</ID>
    <ID>ForbiddenComment:OrderDetailRefundsAdapter.kt$OrderDetailRefundsAdapter.ViewHolder$// TODO: open refund detail screen</ID>
    <ID>ForbiddenComment:ProductDetailFragment.kt$ProductDetailFragment$// TODO: add tracking events here</ID>
    <ID>ForbiddenComment:ProductDetailFragment.kt$ProductDetailFragment$// TODO: remove the null checks once the root cause is identified is fixed</ID>
    <ID>ForbiddenComment:ProductDetailRepository.kt$ProductDetailRepository$// TODO: add event to track sku availability success</ID>
    <ID>ForbiddenComment:RefundByItemsFragment.kt$RefundByItemsFragment$// TODO: Temporarily disabled, this will be used in a future release - do not remove</ID>
    <ID>ForbiddenComment:ShippingCarrierRatesViewModel.kt$ShippingCarrierRatesViewModel$// TODO: Once we start supporting countries other than the US, we'll need to verify what currency the shipping labels purchases use</ID>
    <ID>FunctionOnlyReturningConstant:Screen.kt$Screen.Companion$fun isVisible(): Boolean</ID>
    <ID>ImplicitDefaultLocale:MyStoreDateRangeView.kt$MyStoreDateRangeView$String.format("%s â€“ %s", startDate, endDate)</ID>
    <ID>ImplicitDefaultLocale:WPComWebViewFragment.kt$WPComWebViewFragment$String.format( "log=%s&amp;redirect_to=%s", URLEncoder.encode(StringUtils.notNullStr(username), utf8), URLEncoder.encode(StringUtils.notNullStr(urlToLoad), utf8) )</ID>
    <ID>LargeClass:ProductDetailViewModel.kt$ProductDetailViewModel : ScopedViewModel</ID>
    <ID>LongMethod:AddOrderShipmentTrackingFragment.kt$AddOrderShipmentTrackingFragment$private fun setupObservers(binding: FragmentAddShipmentTrackingBinding)</ID>
    <ID>LongMethod:CreateShippingLabelFragment.kt$CreateShippingLabelFragment$private fun subscribeObservers(binding: FragmentCreateShippingLabelBinding)</ID>
    <ID>LongMethod:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$private fun initializeStateMachine()</ID>
    <ID>LongMethod:EditShippingLabelPaymentFragment.kt$EditShippingLabelPaymentFragment$private fun setupObservers(binding: FragmentEditShippingLabelPaymentBinding)</ID>
    <ID>LongMethod:LoginNoJetpackFragment.kt$LoginNoJetpackFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$ override fun onDestinationChanged(controller: NavController, destination: NavDestination, arguments: Bundle?)</ID>
    <ID>LongMethod:MainSettingsFragment.kt$MainSettingsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:Order.kt$fun WCOrderModel.toAppModel(): Order</ID>
    <ID>LongMethod:OrderDetailFragment.kt$OrderDetailFragment$private fun setupObservers(viewModel: OrderDetailViewModel)</ID>
    <ID>LongMethod:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$fun bind(shippingLabel: ShippingLabel)</ID>
    <ID>LongMethod:OrderListItemDataSource.kt$OrderListItemDataSource$override fun getItemIdentifiers( listDescriptor: WCOrderListDescriptor, remoteItemIds: List&lt;RemoteId&gt;, isListFullyFetched: Boolean ): List&lt;OrderListItemIdentifier&gt;</ID>
    <ID>LongMethod:OrderNavigator.kt$OrderNavigator$fun navigate(fragment: Fragment, target: OrderNavigationTarget)</ID>
    <ID>LongMethod:OrderTestUtils.kt$OrderTestUtils$ fun generateOrders(): List&lt;WCOrderModel&gt;</ID>
    <ID>LongMethod:Product.kt$fun Product.toDataModel(storedProductModel: WCProductModel? = null): WCProductModel</ID>
    <ID>LongMethod:Product.kt$fun WCProductModel.toAppModel(): Product</ID>
    <ID>LongMethod:ProductDetailFragment.kt$ProductDetailFragment$private fun setupResultHandlers(viewModel: ProductDetailViewModel)</ID>
    <ID>LongMethod:ProductInventoryFragment.kt$ProductInventoryFragment$private fun setupObservers(viewModel: ProductInventoryViewModel)</ID>
    <ID>LongMethod:ProductNavigator.kt$ProductNavigator$fun navigate(fragment: Fragment, target: ProductNavigationTarget)</ID>
    <ID>LongMethod:ProductPricingFragment.kt$ProductPricingFragment$private fun setupViews(currency: String, isCurrencyPrefix: Boolean, pricingData: PricingData)</ID>
    <ID>LongMethod:RefundByItemsFragment.kt$RefundByItemsFragment$private fun setupObservers()</ID>
    <ID>LongMethod:ShippingCarrierRatesAdapter.kt$ShippingCarrierRatesAdapter.RateListAdapter.RateViewHolder$private fun bindOptions(rateItem: ShippingRateItem, isExpanded: Boolean)</ID>
    <ID>LongMethod:ShippingCarrierRatesViewModel.kt$ShippingCarrierRatesViewModel$@Suppress("UNCHECKED_CAST") private fun generateRateModels(packageRates: List&lt;ShippingPackage&gt;): List&lt;PackageRateListItem&gt;</ID>
    <ID>LongMethod:ShippingLabelsStateMachine.kt$ShippingLabelsStateMachine$private fun createStateMachine(initialState: State = State.Idle)</ID>
    <ID>LongMethod:SitePickerActivity.kt$SitePickerActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:SitePickerActivity.kt$SitePickerActivity$override fun showSiteNotConnectedJetpackView(url: String)</ID>
    <ID>LongMethod:SitePickerActivity.kt$SitePickerActivity$override fun showStoreList(wcSites: List&lt;SiteModel&gt;)</ID>
    <ID>LongMethod:WCEmptyView.kt$WCEmptyView$fun show( type: EmptyViewType, searchQueryOrFilter: String? = null, onButtonClick: (() -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:ShippingLabelRepository.kt$ShippingLabelRepository$( orderId: Long, origin: Address, destination: Address, packages: List&lt;ShippingLabelPackage&gt;, rates: List&lt;ShippingRate&gt;, customsPackages: List&lt;CustomsPackage&gt;? )</ID>
    <ID>LongParameterList:WooNotificationBuilder.kt$WooNotificationBuilder$( channelId: String, inboxMessage: String, subject: String, summaryText: String, notification: Notification, shouldDisplaySummaryText: Boolean, )</ID>
    <ID>LongParameterList:WooNotificationBuilder.kt$WooNotificationBuilder$( pushId: Int, defaults: Int, channelId: String, notification: Notification, addCustomNotificationSound: Boolean, isGroupNotification: Boolean )</ID>
    <ID>LoopWithTooManyJumpStatements:DashboardStatsBarChart.kt$DashboardStatsBarChart$for (i in mIndicesToHighlight.indices) { val highlight = mIndicesToHighlight[i] // This is the line that causes the crash val set = mData.getDataSetByIndex(highlight.dataSetIndex) ?: continue val e = mData.getEntryForHighlight(mIndicesToHighlight[i]) as? BarEntry ?: continue val entryIndex = set.getEntryIndex(e) // make sure entry not null if (entryIndex &gt; set.entryCount * mAnimator.phaseX) { continue } val pos = getMarkerPosition(highlight) // check bounds if (!mViewPortHandler.isInBounds(pos[0], pos[1])) continue // callbacks to update the content mMarker.refreshContent(e, highlight) // draw the marker mMarker.draw(canvas, pos[0], pos[1]) }</ID>
    <ID>LoopWithTooManyJumpStatements:RoundedBarChartRenderer.kt$RoundedBarChartRenderer$for (high in indices) { val set = barData.getDataSetByIndex(high.dataSetIndex) if (set == null || !set.isHighlightEnabled) continue val e = set.getEntryForXValue(high.x, high.y) if (!isInBoundsX(e, set)) continue val trans = mChart.getTransformer(set.axisDependency) mHighlightPaint.color = set.highLightColor mHighlightPaint.alpha = set.highLightAlpha val isStack = high.stackIndex &gt;= 0 &amp;&amp; e.isStacked val y1: Float val y2: Float if (isStack) { if (mChart.isHighlightFullBarEnabled) { y1 = e.positiveSum y2 = -e.negativeSum } else { val range = e.ranges[high.stackIndex] y1 = range.from y2 = range.to } } else { y1 = e.y y2 = 0f } prepareBarHighlight(e.x, y1, y2, barData.barWidth / 2f, trans) setHighlightDrawPos(high, mBarRect) c.drawRoundRect(mBarRect, mRadius, mRadius, mHighlightPaint) }</ID>
    <ID>MagicNumber:AttributeTermsListAdapter.kt$AttributeTermsListAdapter$300</ID>
    <ID>MagicNumber:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$1000.0</ID>
    <ID>MagicNumber:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$4</ID>
    <ID>MagicNumber:CurrencyAmountDialog.kt$CurrencyAmountDialog$200</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$23</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$59</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$7</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils.Companion$3600</ID>
    <ID>MagicNumber:ListExt.kt$3</ID>
    <ID>MagicNumber:MainBottomNavigationView.kt$MainBottomNavigationView$3</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$0.5f</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$100</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$10f</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$23</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$3</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$47</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$59</ID>
    <ID>MagicNumber:MyStoreStatsView.kt$MyStoreStatsView$1.5f</ID>
    <ID>MagicNumber:OfflineStatusBarView.kt$OfflineStatusBarView$2000</ID>
    <ID>MagicNumber:OrderDetailCustomerInfoView.kt$OrderDetailCustomerInfoView$180F</ID>
    <ID>MagicNumber:OrderDetailCustomerInfoView.kt$OrderDetailCustomerInfoView$200</ID>
    <ID>MagicNumber:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$180F</ID>
    <ID>MagicNumber:OrderDetailShippingLabelsAdapter.kt$OrderDetailShippingLabelsAdapter.ShippingLabelsViewHolder$200</ID>
    <ID>MagicNumber:OrderListFragment.kt$OrderListFragment$100</ID>
    <ID>MagicNumber:OrderListViewModel.kt$OrderListViewModel$1_000</ID>
    <ID>MagicNumber:ProductImagesNotificationHandler.kt$ProductImagesNotificationHandler$100</ID>
    <ID>MagicNumber:ProductImagesUtils.kt$ProductImagesUtils$1000</ID>
    <ID>MagicNumber:ProductTagsAdapter.kt$ProductTagsAdapter.ProductTagViewHolder$3</ID>
    <ID>MagicNumber:ReviewDetailFragment.kt$ReviewDetailFragment$256</ID>
    <ID>MagicNumber:ReviewListAdapter.kt$ReviewListAdapter.ItemViewHolder$100F</ID>
    <ID>MagicNumber:RoundedBarChartRenderer.kt$RoundedBarChartRenderer$3</ID>
    <ID>MagicNumber:RoundedBarChartRenderer.kt$RoundedBarChartRenderer$4</ID>
    <ID>MagicNumber:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$3</ID>
    <ID>MagicNumber:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$4</ID>
    <ID>MagicNumber:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$5</ID>
    <ID>MagicNumber:ShippingCustomsAdapter.kt$ShippingCustomsLineAdapter.CustomsLineViewHolder$180f</ID>
    <ID>MagicNumber:ShippingCustomsAdapter.kt$ShippingCustomsLineAdapter.CustomsLineViewHolder$300</ID>
    <ID>MagicNumber:ShippingCustomsViewModel.kt$ShippingCustomsViewModel$2500.0</ID>
    <ID>MagicNumber:ShippingLabel.kt$ShippingLabel$30</ID>
    <ID>MagicNumber:SkeletonView.kt$SkeletonView$250</ID>
    <ID>MagicNumber:StringExt.kt$160</ID>
    <ID>MagicNumber:StyleAttrUtils.kt$StyleAttrUtils$26</ID>
    <ID>MagicNumber:TagView.kt$TagView$4</ID>
    <ID>MagicNumber:TimeGroup.kt$TimeGroup.Companion$2</ID>
    <ID>MagicNumber:UiHelpers.kt$UiHelpers$0.8</ID>
    <ID>MagicNumber:UnreadItemDecoration.kt$UnreadItemDecoration$3</ID>
    <ID>MagicNumber:ViewExt.kt$300L</ID>
    <ID>MagicNumber:ViewUtils.kt$0.5f</ID>
    <ID>MagicNumber:WCEmptyView.kt$WCEmptyView$50L</ID>
    <ID>MagicNumber:WCMaterialOutlinedEditTextView.kt$WCMaterialOutlinedEditTextView$100</ID>
    <ID>MagicNumber:WCProductImageGalleryView.kt$WCProductImageGalleryView.ImageViewHolder$0.5F</ID>
    <ID>MagicNumber:WooCommerceGlideModule.kt$WooCommerceGlideModule$1024</ID>
    <ID>MagicNumber:WooWellSqlConfig.kt$WooWellSqlConfig$1024L</ID>
    <ID>MagicNumber:WooWellSqlConfig.kt$WooWellSqlConfig$5L</ID>
    <ID>MatchingDeclarationName:NavController.kt$CallThrottler</ID>
    <ID>MaxLineLength:CreateShippingLabelViewModel.kt$CreateShippingLabelViewModel$// TODO: Once we start supporting countries other than the US, we'll need to verify what currency the shipping labels purchases use</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity.&lt;no name provided&gt;$// We need to post this to the view handler to make sure shouldExpandToolbar returns the correct value</ID>
    <ID>MaxLineLength:MainPresenter.kt$MainPresenter$// Magic link login is now complete - notify the activity to set the selected site and proceed with loading UI</ID>
    <ID>MaxLineLength:OrderListItemDataSource.kt$OrderListItemDataSource$*</ID>
    <ID>MaxLineLength:ReviewListRepository.kt$ReviewListRepository$/* * Fetch notifications so we can match them to reviews to get the read state. This * will wait for completion. If this fails we still consider fetching reviews to be successful since it * failing won't block the user. Just log the exception. */</ID>
    <ID>MaxLineLength:ShippingCarrierRatesViewModel.kt$ShippingCarrierRatesViewModel$// TODO: Once we start supporting countries other than the US, we'll need to verify what currency the shipping labels purchases use</ID>
    <ID>MayBeConst:ProductListFragment.kt$ProductListFragment.Companion$val PRODUCT_FILTER_RESULT_KEY = "product_filter_result"</ID>
    <ID>MayBeConst:TestBase.kt$TestBase.Companion$val wireMockPort = 8080</ID>
    <ID>MemberNameEqualsClassName:CurrencyFormatter.kt$CurrencyFormatter.Companion$// Formats the value to two decimal places private val currencyFormatter: DecimalFormat by lazy { DecimalFormat("0.00") }</ID>
    <ID>MemberNameEqualsClassName:SkeletonView.kt$SkeletonView$private lateinit var skeletonView: View</ID>
    <ID>NestedBlockDepth:ProductListViewModel.kt$ProductListViewModel$private suspend fun fetchProductList( searchQuery: String? = null, loadMore: Boolean = false, scrollToTop: Boolean = false )</ID>
    <ID>NestedBlockDepth:ProductSelectionListViewModel.kt$ProductSelectionListViewModel$private suspend fun fetchProductList( searchQuery: String? = null, loadMore: Boolean = false )</ID>
    <ID>NestedBlockDepth:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun getItemViewType(position: Int): Int</ID>
    <ID>NestedBlockDepth:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int)</ID>
    <ID>NestedBlockDepth:SitePickerActivity.kt$SitePickerActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>PrintStackTrace:TestIdler.kt$TestIdler$e</ID>
    <ID>ProtectedMemberInFinalClass:OrderListViewModel.kt$OrderListViewModel$protected val lifecycleRegistry: LifecycleRegistry by lazy { LifecycleRegistry(this) }</ID>
    <ID>ReturnCount:AddOrderShipmentTrackingViewModel.kt$AddOrderShipmentTrackingViewModel$fun onAddButtonTapped()</ID>
    <ID>ReturnCount:ChromeCustomTabUtils.kt$ChromeCustomTabUtils$ private fun canUseCustomTabs(context: Context): Boolean</ID>
    <ID>ReturnCount:DrawableMatcher.kt$DrawableMatcher$override fun matchesSafely(item: View?): Boolean</ID>
    <ID>ReturnCount:EditShippingLabelPackagesViewModel.kt$EditShippingLabelPackagesViewModel$suspend fun fetchVariationIfNeeded(productId: Long, variationId: Long): Boolean</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>ReturnCount:MyStoreStatsView.kt$MyStoreStatsView$ private fun getRecencyMessage(): String?</ID>
    <ID>ReturnCount:OrderListAdapter.kt$&lt;no name provided&gt;$override fun areItemsTheSame(oldItem: OrderListItemUIType, newItem: OrderListItemUIType): Boolean</ID>
    <ID>ReturnCount:ParentCategoryListAdapter.kt$ParentCategoryListAdapter$private fun isSameList(categories: List&lt;ProductCategoryItemUiModel&gt;): Boolean</ID>
    <ID>ReturnCount:Product.kt$Product$ private fun isSameCategories(updatedCategories: List&lt;ProductCategory&gt;): Boolean</ID>
    <ID>ReturnCount:Product.kt$Product$ private fun isSameTags(updatedTags: List&lt;ProductTag&gt;): Boolean</ID>
    <ID>ReturnCount:Product.kt$Product$fun hasAttributeChanges(updatedProduct: Product?): Boolean</ID>
    <ID>ReturnCount:ProductDetailViewModel.kt$ProductDetailViewModel$ fun onBackButtonClickedProductDetail(): Boolean</ID>
    <ID>ReturnCount:ProductDetailViewModel.kt$ProductDetailViewModel$ fun renameAttributeInDraft(attributeId: Long, oldAttributeName: String, newAttributeName: String): Boolean</ID>
    <ID>ReturnCount:ProductFilterListViewModel.kt$ProductFilterListViewModel.FilterListItemUiModel$ private fun List&lt;FilterListOptionItemUiModel&gt;.isSameFilterOptions( updatedFilterOptions: List&lt;FilterListOptionItemUiModel&gt; ): Boolean</ID>
    <ID>ReturnCount:ProductHelper.kt$ProductHelper$ fun productOrVariationId(productId: Long?, variationId: Long?): Long</ID>
    <ID>ReturnCount:ProductImageMap.kt$ProductImageMap$fun get(remoteProductId: Long): String?</ID>
    <ID>ReturnCount:ReviewListAdapter.kt$ReviewListAdapter$ fun getItemTypeAtRecyclerPosition(position: Int): ItemType</ID>
    <ID>ReturnCount:ReviewListAdapter.kt$ReviewListAdapter$private fun isSameList(reviews: List&lt;ProductReview&gt;): Boolean</ID>
    <ID>ReturnCount:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun getItemViewType(position: Int): Int</ID>
    <ID>ReturnCount:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int)</ID>
    <ID>ReturnCount:SitePickerAdapter.kt$SitePickerAdapter$ private fun isSameSiteList(sites: List&lt;SiteModel&gt;): Boolean</ID>
    <ID>ReturnCount:StringExt.kt$ fun String.fastStripHtml(): String</ID>
    <ID>ReturnCount:StringExt.kt$fun String.semverCompareTo(otherVersion: String): Int</ID>
    <ID>ReturnCount:TestBase.kt$LocaleAwareRenderableDate$override fun toString(): String</ID>
    <ID>ReturnCount:WCOrderModelExt.kt$ fun isVirtualProduct( site: SiteModel, lineItems: List&lt;LineItem&gt;, productStore: WCProductStore ): Boolean</ID>
    <ID>ReturnCount:WCProductImageGalleryView.kt$WCProductImageGalleryView.ImageGalleryAdapter$ private fun isSameImageList(images: List&lt;Product.Image&gt;): Boolean</ID>
    <ID>SerialVersionUIDInSerializableClass:InfoScreenFragment.kt$InfoScreenFragment$InfoScreenLinkAction : Serializable</ID>
    <ID>SpreadOperator:OrderDetailFragment.kt$OrderDetailFragment$(event.message, *event.args)</ID>
    <ID>SpreadOperator:RefundSummaryFragment.kt$RefundSummaryFragment$(event.message, *event.args)</ID>
    <ID>SpreadOperator:ShippingLabelRefundFragment.kt$ShippingLabelRefundFragment$(event.message, *event.args)</ID>
    <ID>SpreadOperator:UiHelpers.kt$UiHelpers$( uiString.stringRes, *uiString.params.map { value -&gt; getTextOfUiString( context, value ) }.toTypedArray() )</ID>
    <ID>SwallowedException:ActivityUtils.kt$ActivityUtils$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:ActivityUtils.kt$ActivityUtils$exception: ActivityNotFoundException</ID>
    <ID>SwallowedException:AppPrefs.kt$AppPrefs$ex: Throwable</ID>
    <ID>SwallowedException:AppRatingDialog.kt$AppRatingDialog$e: android.content.ActivityNotFoundException</ID>
    <ID>SwallowedException:EditShippingLabelAddressFragment.kt$EditShippingLabelAddressFragment$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:FileDownloader.kt$FileDownloader$e: InterruptedIOException</ID>
    <ID>SwallowedException:PackageUtils.kt$PackageUtils$e: ClassNotFoundException</ID>
    <ID>SwallowedException:PackageUtils.kt$PackageUtils$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:PrintShippingLabelCustomsFormViewModelTest.kt$PrintShippingLabelCustomsFormViewModelTest$e: CancellationException</ID>
    <ID>SwallowedException:ProductDownloadDetailsViewModel.kt$ProductDownloadDetailsViewModel$e: URISyntaxException</ID>
    <ID>SwallowedException:ProductListViewModel.kt$ProductListViewModel$e: CancellationException</ID>
    <ID>SwallowedException:ProductSelectionListViewModel.kt$ProductSelectionListViewModel$e: CancellationException</ID>
    <ID>SwallowedException:ProductShippingClassViewModel.kt$ProductShippingClassViewModel$e: CancellationException</ID>
    <ID>SwallowedException:RecyclerViewMatcher.kt$RecyclerViewMatcher.&lt;no name provided&gt;$var4: Resources.NotFoundException</ID>
    <ID>SwallowedException:Screen.kt$Screen$e: Throwable</ID>
    <ID>SwallowedException:Screen.kt$Screen$e: java.lang.Exception</ID>
    <ID>SwallowedException:Screen.kt$Screen$ex: Exception</ID>
    <ID>SwallowedException:Screen.kt$Screen.Companion$e: Throwable</ID>
    <ID>SwallowedException:StringDateFormatExt.kt$e: Exception</ID>
    <ID>SwallowedException:StringUtils.kt$StringUtils$e: IOException</ID>
    <ID>SwallowedException:StringUtils.kt$StringUtils$e: NotFoundException</ID>
    <ID>SwallowedException:WooLogViewerActivity.kt$WooLogViewerActivity$ex: android.content.ActivityNotFoundException</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:MetaData.kt$MetaData$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ProductCatalogVisibilityFragment.kt$ProductCatalogVisibilityFragment$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ProductStatusFragment.kt$ProductStatusFragment$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShippingLabelPaymentMethodsAdapter.kt$ShippingLabelPaymentMethodsAdapter.PaymentMethodViewHolder$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShippingLabelServicePackageAdapter.kt$ShippingLabelServicePackageAdapter$IllegalArgumentException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShippingPackagesAdapter.kt$ShippingPackagesAdapter$IllegalArgumentException()</ID>
    <ID>ThrowsCount:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$ fun notifyNotLoadedStateChanged(section: Section, previousState: State)</ID>
    <ID>ThrowsCount:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$ fun notifyStateChangedToLoaded(section: Section, previousState: State)</ID>
    <ID>TooGenericExceptionCaught:Address.kt$Address$e: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:AppPrefs.kt$AppPrefs$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:DateExt.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DateUtils.kt$DateUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DateUtils.kt$DateUtils$e: IndexOutOfBoundsException</ID>
    <ID>TooGenericExceptionCaught:FileDownloader.kt$FileDownloader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FileUtils.kt$FileUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OrderShipmentTrackingHelper.kt$OrderShipmentTrackingHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PhoneUtils.kt$PhoneUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:StringDateFormatExt.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TokenProvider.kt$TokenProvider$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:WooLogViewerActivity.kt$WooLogViewerActivity$e: Exception</ID>
    <ID>TooGenericExceptionThrown:ActionableEmptyView.kt$ActionableEmptyView$throw RuntimeException("$context: ActionableEmptyView must have a title (aevTitle)")</ID>
    <ID>TopLevelPropertyNaming:ZendeskHelper.kt$private const val enablePushNotificationsDelayAfterIdentityChange: Long = 2500</ID>
    <ID>TopLevelPropertyNaming:ZendeskHelper.kt$private const val maxLogfileLength: Int = 63000 // Max characters allowed in the system status report field</ID>
    <ID>TopLevelPropertyNaming:ZendeskHelper.kt$private const val zendeskNeedsToBeEnabledError = "Zendesk needs to be setup before this method can be called"</ID>
    <ID>UnnecessaryAbstractClass:ActionRequest.kt$ActionRequest</ID>
    <ID>UnnecessaryAbstractClass:BaseUnitTest.kt$BaseUnitTest</ID>
    <ID>UnnecessaryAbstractClass:MultiLiveEvent.kt$MultiLiveEvent$Event</ID>
    <ID>UnusedPrivateMember:AttributesAddedFragment.kt$AttributesAddedFragment$view: View</ID>
    <ID>UnusedPrivateMember:MainPresenter.kt$MainPresenter$event: SelectedSiteChangedEvent</ID>
    <ID>UnusedPrivateMember:MainPresenter.kt$MainPresenter$private val notificationStore: NotificationStore</ID>
    <ID>UnusedPrivateMember:MainPresenter.kt$MainPresenter$private val siteStore: SiteStore</ID>
    <ID>UnusedPrivateMember:MyStoreStatsView.kt$MyStoreStatsView$entry</ID>
    <ID>UnusedPrivateMember:OrderDetailOrderNoteItemView.kt$OrderDetailOrderNoteItemView$showBottomPadding: Boolean</ID>
    <ID>UnusedPrivateMember:ProductDetailViewModel.kt$ProductDetailViewModel$image: Product.Image</ID>
    <ID>UnusedPrivateMember:ProductDetailViewModel.kt$ProductDetailViewModel$isOnSale: Boolean? = null</ID>
    <ID>UnusedPrivateMember:SequenceExt.kt$element: T</ID>
    <ID>UnusedPrivateMember:ShippingLabelCreatePackageViewModel.kt$ShippingLabelCreatePackageViewModel$private var viewState by viewStateData</ID>
    <ID>VariableNaming:ScopedViewModel.kt$ScopedViewModel$protected open val _event: MutableLiveData&lt;Event&gt; = MultiLiveEvent()</ID>
  </CurrentIssues>
</SmellBaseline>
